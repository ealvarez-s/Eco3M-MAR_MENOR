      subroutine advection_bio
!______________________________________________________________________
! S model
! relese S.26 - last update: 25-03-18
!______________________________________________________________________

      use module_principal
      use module_parallele
      implicit none
!..............................................................................
! Version date      Description des modifications
!         01/11/01: inversion de l'ordre des boucles: J passe avant I
!         14/12/01: bienvenue à ITIMEBIO
!         17/12/01: amenagements pour cas forward (economie de RAM)
!         26/12/02: amenagements pour remise en service schema forward
!         14/02/03: variable xy_z(i,j,1) était non initialisée. Ajout boucle 104
!                   de mise à zéro.
!         19/03/03: date de debut et de fin de calcul pour traceur
!         04/05/06: amenagements pour compiler en double precision
!         04/07/06: boucle 103: j avant i. Regroupement de constantes.
!         20/04/07: passage à la coordonnées curviligne
! 2009.3  01-10-09: suppression kount_bio
!         02-10-09: dti remplacé par dti_fw
! 2010.8  03-05-10  supression biohz et nouveau schema forward
! 2010.10 21-06-10  advection pour traceur avec sous-pas de temps
! 2010.22 01-05-11  Reecriture du cas sous-pas-de-temps advection tracer
! 2010.24 23-11-11  Ajouter une verification optionnelle (non active par defaut)
!                   du critere cfl pour l'advection
! S.26    06-10-13  float replaced by real
!         22-01-14  commentaire devant test sur masque
!         06-02-14  obc parallelisation
!         29-04-14  nloop devient substep_advbio defini dans namelist "notebook_advection"
!         16-07-14  Ajout des schemas advection_bioup2up3 advection_bio_tvd_pmx
!         20-07-14  Suite point precedent. Aspects C.L. fond, surface, fleuves
!         25-03-15  ibl1_advbio,ibl2_advbio,jbl1_advbio,jbl2_advbio definisse 
!                   une zone buffer sans advection pour la bio
!         19-07-15  - utilisation de upwindriver_t au schema bioup2up3 pour schema
!                   100% up2 dans le voisinage des embouchures
!                   - bioup2up3: schema up2 dans zone intertidales
!         05-08-15  schema vst implique utilisation du masque de surface
!         17-03-16  verifier les dimensions A l'etat initial et aprEs lecture
!                   des fichiers restart
!         25-04-16  pas d'advection bio si flag_1dv=1
!         03-07-16  Ajout d'une subroutine calculant le nombre de sous-iterations advectives
!         04-07-16  appel A routine obc mpi deplacE pour conservation mpi
!         11-07-16  ajout routine advection_bio_rmnegval supprimant les valeurs negatives
!         12-11-16  Ajout schema QUICKEST
!         13-11-16  QUICKEST : deplacement wetmask
!         06-12-16  Suppression d'un return dans subroutine rmnegval et ajout d'un commentaire
!         13-12-16  Choix wsed implicite ou explicite selon les traceurs
!         18-01-17  - Prise en compte de upwindriver_t dans l'advection (voir aussi notebook_advection)
!                   - Correction d'un bug 
!                   - Meilleure definition du terme de compensation de divergence
!         25-01-17  Modif ecriture fichier dti_bio_w
!         08-02-17  ajout advection_bio_min_max 
!         12-02-17  Mises A jour cas NEMO offline
!         13-02-17  Mix Max modulo 100
!         23-02-17  Flux air/mer portE par fluxbio_w et non pas par omega
!         03-11-17  ajout subroutine advection_bio_rmnegval3d_plus
!         18-02-18  compatibilite compilateur gfortran
!         25-03-18  corrections bug
!..............................................................................
#ifdef synopsis
       subroutinetitle='advection_bio'
       subroutinedescription=' '
       call main_synopsis(subroutinetitle,subroutinedescription)
#endif

       if(flag_1dv==1)return !25-04-16 pas d'advection bio si flag_1dv=1

! Decommenter cette ligne pour diag min max sur bio_t
!      call advection_bio_min_max !08-02-17

! Nombre de sous-pas de temps advectifs
       if(iadvec_bio==3) then !pmxpmx> !12-11-16

! Verification des dimensions pour anyv3d
       if(iteration3d==0.or.iteration3d==iteration3d_restart) then !>>>
           call advection_quickest_checkdim
           call advection_checkdim_anyv1d
       endif                                                       !>>>

! advection horizontale pretraitement:
        call advection_bio_substep
        call advection_bio_quickest_coef_h

      do vb=1,vbmax ! vbvbvbvb> 

! advection horizontale:
        call advection_bio_quickest_h

! advection verticale:
        k0=0
        if(vb==1)k0=1
        if(wsed_explicit(vb)==1.and.wsed(1,vb)/=wsed(1,max(vb-1,1)))k0=1 !13-12-16
        if(k0==1)call advection_bio_quickest_coef_v

        call advection_bio_quickest_v

      enddo         ! vbvbvbvb> 

      return

       else                   !pmxpmx>

       stop 'Dans notebook_advection choisir iadvec_bio=3'

       call advection_bio_get_substep !03-07-16

       if(iadvec_bio==0) then !000000>
                              call advection_bioup
!                             call advection_bioupclassico
                              return
       endif                  !000000>

       if(iadvec_bio==1) then !222222>
                              call advection_bio_tvd_pmx
!                             call advection_biotvdclassico
                              return
       endif                  !222222>

       if(iadvec_bio==2) then !111111>
                              call advection_bioup2up3
                              return
       endif                  !111111>

       endif                  !pmxpmx>

      stop ' No scheme to compute bio advection'
      end subroutine advection_bio

!..............................................................................

      subroutine advection_bioup
      use module_principal
      use module_parallele
      implicit none
      integer loop_
#ifdef synopsis
       subroutinetitle='advection_bioup'
       subroutinedescription=' '
       call main_synopsis(subroutinetitle,subroutinedescription)
#endif

!...................................................................!
! NOTE SUR LE SCHEMA D'ADVECTION                                    !
! Schema upwind
!...................................................................!

!*********************************************************************
! ADVECTION VARIABLES DU MODELE BIOLOGIQUE ou SEDIMENTAIRE
! DEBUT:
!*********************************************************************
!     substep_advbio est defini dans namelist "notebook_advection"
      const1=0.5*dti_fw/real(substep_advbio) !06-10-13

      do j=1,jmax ; do i=1,imax
       xy_t(i,j,0)=1. ! Sert a annuler omega(kmax+1) si omega(kmax+1)>0
      enddo ; enddo

      do  k=1,kmax    ! Obligatoirement croissant a cause de xy_t(:,:,0)

       if(k==kmax) then ! -- Surface case --> (note: useless if omega(kmax+1)==0)
        do j=1,jmax ; do i=1,imax
         if(omega_w(i,j,kmax+1,1)>0.)xy_t(i,j,0)=0. ! No upward flux across surface
        enddo       ; enddo
       endif            ! -- Surface case -->

      do  j=1,jmax
      do  i=1,imax

      x1=   sign(un,veldydz_u(i+1,j,k,1))
      x2=   sign(un,veldydz_u(i,  j,k,1))
      x3=   sign(un,veldxdz_v(i,j+1,k,1))
      x4=   sign(un,veldxdz_v(i,j  ,k,1))
      x5=   sign(un,omega_w(i,j,k+1,1))
      x6=   sign(un,omega_w(i,j,k  ,1))

! Coef en facteur de bio_z(i,j,k):
      anyv3d(i,j,k,0)=                                               &
       (  veldydz_u(i+1,j  ,k  ,1)*const1*(-1.-x1)                   &
         +veldydz_u(i  ,j  ,k  ,1)*const1*( 1.-x2)                   &
         +veldxdz_v(i  ,j+1,k  ,1)*const1*(-1.-x3)                   &
         +veldxdz_v(i  ,j  ,k  ,1)*const1*( 1.-x4)  )/dxdy_t(i,j)    &
           +omega_w(i  ,j  ,k+1,1)*const1*(-1.-x5)*xy_t(i,j,0)       &
           +omega_w(i  ,j  ,k  ,1)*const1*( 1.-x6)

! Coef en facteur de bio_t(i+1,j,k):
      anyv3d(i,j,k,1)=veldydz_u(i+1,j  ,k  ,1)*const1*(-1.+x1)/dxdy_t(i,j)

! Coef en facteur de bio_t(i-1,j,k):
      anyv3d(i,j,k,2)=veldydz_u(i  ,j  ,k  ,1)*const1*( 1.+x2)/dxdy_t(i,j)

! Coef en facteur de bio_t(i,j+1,k):
      anyv3d(i,j,k,3)=veldxdz_v(i  ,j+1,k  ,1)*const1*(-1.+x3)/dxdy_t(i,j)

! Coef en facteur de bio_t(i,j-1,k):
      anyv3d(i,j,k,4)=veldxdz_v(i  ,j  ,k  ,1)*const1*( 1.+x4)/dxdy_t(i,j)

! Coef en facteur de bio_t(i,j,k+1):
      anyv3d(i,j,k,5)=omega_w(i  ,j  ,k+1,1)*const1*(-1.+x5)*xy_t(i,j,0)

! Coef en facteur de bio_t(i,j,k-1):
      anyv3d(i,j,k,6)=omega_w(i  ,j  ,k  ,1)*const1*( 1.+x6)

      enddo
      enddo
      enddo

      do loop_=1,substep_advbio

      call obc_bio_botsurf   ! obligatoirement avant obc_bio(1)
      call obc_bio(1)        ! rivieres
      call obc_bio_mpi('z1') !04-07-16

      rap2=real(loop_  )/real(substep_advbio)          !01-05-11
      rap1=real(loop_-1)/real(substep_advbio)          !01-05-11

      x1=(1.-rap1)*0.5
      x2=    rap1 *0.5
      x3=(1.-rap2)*0.5
      x4=    rap2 *0.5
! Uncomment this line to check the CFL criteria:
!     call advection_bioup_check_cfl    ! 23-11-11

! Note: si substep_advbio=1 rap2=1 rap1=0 x4=0.5 x3=0 x2=0 x1=0.5 -> dz(t+1/2)=0.5*(dz(t+1)+dz(t))
!                                                           dz(t-1/2)=0.5*(dz(t)+dz(t-1))

      do vb=1,vbmax
!     do vb=1,1
      do k=1,kmax
      do j=1,jmax
      do i=1,imax

      anyv3d(i,j,k,7)=(bio_t(i  ,j  ,k  ,vb)                       &
                     *( x2*(dz_t(i,j,k,after)+dz_t(i,j,k,now   ))  &   !01-05-11
                       +x1*(dz_t(i,j,k,now  )+dz_t(i,j,k,before))) &

           +anyv3d(i,j,k,0)*bio_t(i  ,j  ,k  ,vb)                  &
           +anyv3d(i,j,k,1)*bio_t(i+1,j  ,k  ,vb)                  &
           +anyv3d(i,j,k,2)*bio_t(i-1,j  ,k  ,vb)                  &
           +anyv3d(i,j,k,3)*bio_t(i  ,j+1,k  ,vb)                  &
           +anyv3d(i,j,k,4)*bio_t(i  ,j-1,k  ,vb)                  &
           +anyv3d(i,j,k,5)*bio_t(i  ,j  ,k+1,vb)                  &
           +anyv3d(i,j,k,6)*bio_t(i  ,j  ,k-1,vb)                  &
                   )/( x4*(dz_t(i,j,k,after)+dz_t(i,j,k,now   ))   &  !01-05-11
                      +x3*(dz_t(i,j,k,now  )+dz_t(i,j,k,before)))

      enddo    !i
      enddo    !j
      enddo    !k

!     call advection_bio_test_pmx1

! update bio_t (move anyv3d on bio_t) and bottom boundary condition
       call advection_biofinalize(7) !25-03-15

      enddo    !vb

!     call obc_bio_mpi('z1') !06-02-14

      enddo    !loop_

      return

!*********************************************************************
! ADVECTION VARIABLES DU MODELE BIOLOGIQUE ou SEDIMENTAIRE
! FIN
!*********************************************************************

      end subroutine advection_bioup

!.....................................................................

      subroutine advection_bioup_check_cfl    ! 23-11-11
      use module_principal
      implicit none
      double precision cfl_extrem1_,cfl_extrem2_,x0_
#ifdef synopsis
       subroutinetitle='advection_bioup_check_cfl'
       subroutinedescription=' '
       call main_synopsis(subroutinetitle,subroutinedescription)
#endif

!     cfl_extrem1_=0.   ; cfl_extrem2_=1.   ! Tolerance zero
      cfl_extrem1_=-0.2 ; cfl_extrem2_=1.2  ! Tolerance + ou - 20% de la cfl stricte

      do k=1,kmax
      do j=1,jmax
      do i=1,imax
      if(mask_t(i,j,k)==1) then !111111111111111>

      x0_=1./( x4*(dz_t(i,j,k,after)+dz_t(i,j,k,now   ))   &  !01-05-11
                 +x3*(dz_t(i,j,k,now  )+dz_t(i,j,k,before)))

       do k0=1,6
        if(    anyv3d(i,j,k,k0)*x0_ > cfl_extrem2_        &
           .or.anyv3d(i,j,k,k0)*x0_ < cfl_extrem1_ ) then


        write(*,*)'CFL criteria not respected in routine adection_bioup'
        write(*,*)'Grid point i j k=',i,j,k
        stop ' STOP dans subroutine advection_bioup_check_cfl'
        endif

       enddo ! loop_ k0

      endif                     !111111111111111>
      enddo  ! loop_ i
      enddo  ! loop_ j
      enddo  ! loop_ k


      end subroutine advection_bioup_check_cfl

!.....................................................................

      subroutine advection_bioup3_checkdim
      use module_principal
      implicit none
#ifdef synopsis
       subroutinetitle='advection_bioup3_checkdim'
       subroutinedescription=' '
       call main_synopsis(subroutinetitle,subroutinedescription)
#endif

! Verifier dimensions 2DH de bio_t
       ub4=ubound(bio_t) ; lb4=lbound(bio_t)
       if(ub4(2)<jmax+2)stop 'Erreur max dimension 2 bio_t'
       if(lb4(2)>-1)    stop 'Erreur min dimension 2 bio_t'
       if(ub4(1)<imax+2)stop 'Erreur max dimension 1 bio_t'
       if(lb4(1)>-1)    stop 'Erreur min dimension 1 bio_t'

! Verifier 4eme dimension de anyv3d
       ub4=ubound(anyv3d) ; lb4=lbound(anyv3d)
!      if(lb4(4)>0 .or.ub4(4)<13.or. &
!         lb4(3)>-1.or.ub4(3)<kmax+2) then !>>>>>>
!       deallocate(anyv3d)
!         allocate(anyv3d(-1:imax+2,-1:jmax+2,-1:kmax+2,0:13)) ; anyv3d=0
!      endif                               !>>>>>>
       if(lb4(4)>0 .or.ub4(4)<13) then !>>>>>>
        deallocate(anyv3d)
          allocate(anyv3d(-1:imax+2,-1:jmax+2,0:kmax+1,0:13)) ; anyv3d=0
       endif                           !>>>>>>

      end subroutine advection_bioup3_checkdim

!.....................................................................
#ifdef bidon
      subroutine advection_bioup3
      use module_principal
      implicit none
      integer loop_
#ifdef synopsis
       subroutinetitle='advection_bioup3'
       subroutinedescription=' '
       call main_synopsis(subroutinetitle,subroutinedescription)
#endif

      stop 'advection_bioup3 C.L. surface a faire'

      if(iteration3d==0.or.iteration3d==iteration3d_restart)call advection_bioup3_checkdim !17-03-16

      const1=dti_fw/(12.*real(substep_advbio))
      do  j=1,jmax ; do  i=1,imax
       xy_t(i,j,1)=const1/dxdy_t(i,j)
      enddo        ; enddo

      do  k=1,kmax
      do  j=1,jmax
      do  i=1,imax

      x2=veldydz_u(i+1,j,k,1)*xy_t(i,j,1)
      x1=veldydz_u(i  ,j,k,1)*xy_t(i,j,1)

! Coef en facteur de bio_t(i+2,j,k):
      anyv3d(i,j,k,0)=(-x2+abs(x2))*mask_t(i+2,j,k)

! Coef en facteur de bio_t(i+1,j,k):
      anyv3d(i,j,k,1)=x2* (6.+mask_t(i+2,j,k))   &
                 -abs(x2)*(2.+mask_t(i+2,j,k))   &
             -(                                  &
                (-x1+abs(x1))*mask_t(i+1,j,k)    &
              )

! Coef en facteur de bio_t(i,j,k):
      anyv3d(i,j,k,2)=x2* (6.+mask_t(i-1,j,k))   &
                 +abs(x2)*(2.+mask_t(i-1,j,k))   &
             -(                                  &
                      x1* (6.+mask_t(i+1,j,k))   &
                 -abs(x1)*(2.+mask_t(i+1,j,k))   &
              )

! Coef en facteur de bio_t(i-1,j,k):
      anyv3d(i,j,k,3)=(-x2-abs(x2))*mask_t(i-1,j,k) &
             -(                                     &
                        x1* (6.+mask_t(i-2,j,k))    &
                   +abs(x1)*(2.+mask_t(i-2,j,k))    &
              )

! Coef en facteur de bio_t(i-2,j,k):
      anyv3d(i,j,k,4)=-(-x1-abs(x1))*mask_t(i-2,j,k)

      enddo
      enddo
      enddo

      do  k=1,kmax
      do  j=1,jmax
      do  i=1,imax

      x2=veldxdz_v(i,j+1,k,1)*xy_t(i,j,1)
      x1=veldxdz_v(i,j  ,k,1)*xy_t(i,j,1)

! Coef en facteur de bio_t(i,j+2,k):
      anyv3d(i,j,k,5)=(-x2+abs(x2))*mask_t(i,j+2,k)

! Coef en facteur de bio_t(i,j+1,k):
      anyv3d(i,j,k,6)=x2* (6.+mask_t(i,j+2,k))   &
                 -abs(x2)*(2.+mask_t(i,j+2,k))   &
             -(                                  &
                (-x1+abs(x1))*mask_t(i,j+1,k)    &
              )

! Coef en facteur de bio_t(i,j,k):
      anyv3d(i,j,k,2)=                           &
      anyv3d(i,j,k,2)+x2* (6.+mask_t(i,j-1,k))   &
                 +abs(x2)*(2.+mask_t(i,j-1,k))   &
             -(                                  &
                      x1* (6.+mask_t(i,j+1,k))   &
                 -abs(x1)*(2.+mask_t(i,j+1,k))   &
              )

! Coef en facteur de bio_t(i,j-1,k):
      anyv3d(i,j,k,7)=(-x2-abs(x2))*mask_t(i,j-1,k) &
             -(                                     &
                        x1* (6.+mask_t(i,j-2,k))    &
                   +abs(x1)*(2.+mask_t(i,j-2,k))    &
              )

! Coef en facteur de bio_t(i,j-2,k):
      anyv3d(i,j,k,8)=-(-x1-abs(x1))*mask_t(i,j-2,k)

      enddo
      enddo
      enddo

      const1=dti_fw/(12.*real(substep_advbio))
      do  k=1,kmax
      do  j=1,jmax
      do  i=1,imax

      x2=omega_w(i,j,k+1,1)*const1
      x1=omega_w(i,j,k  ,1)*const1

! Coef en facteur de bio_t(i,j,k+2):
      anyv3d(i,j,k,9)=(-x2+abs(x2))

! Coef en facteur de bio_t(i,j  ,k+1):
      anyv3d(i,j,k,10)=x2* (7.               )   &
                  -abs(x2)*(3.               )   &
             -(                                  &
                (-x1+abs(x1))                    &
              )

! Coef en facteur de bio_t(i,j,k):
      anyv3d(i,j,k,2)=                           &
      anyv3d(i,j,k,2)+x2* (7.                )   &
                 +abs(x2)*(3.                )   &
             -(                                  &
                      x1* (7.                )   &
                 -abs(x1)*(3.                )   &
              )

! Coef en facteur de bio_t(i,j,k-1):
      anyv3d(i,j,k,11)=(-x2-abs(x2))              &
             -(                                   &
                        x1* (7.                )  &
                   +abs(x1)*(3.                )  &
              )

! Coef en facteur de bio_t(i,j,k-2):
      anyv3d(i,j,k,12)=-(-x1-abs(x1))

      enddo
      enddo
      enddo

      do loop_=1,substep_advbio

      rap2=real(loop_  )/real(substep_advbio)          !01-05-11
      rap1=real(loop_-1)/real(substep_advbio)          !01-05-11

      x1=(1.-rap1)*0.5
      x2=    rap1 *0.5
      x3=(1.-rap2)*0.5
      x4=    rap2 *0.5
! Uncomment this line to check the CFL criteria:
!     call advection_bioup_check_cfl    ! 23-11-11

! Note: si substep_advbio=1 rap2=1 rap1=0 x4=0.5 x3=0 x2=0 x1=0.5 -> dz(t+1/2)=0.5*(dz(t+1)+dz(t))
!                                                           dz(t-1/2)=0.5*(dz(t)+dz(t-1))

!     do vb=1,vbmax
      do vb=4,4
      do k=1,kmax
       kp1=min(k+1,kmax+1)
       kp2=min(k+2,kmax+1)
       km1=max(k-1,0)
       km2=max(k-2,0)
       do j=1,jmax
       do i=1,imax

       anyv3d(i,j,k,13)=(bio_t(i  ,j  ,k  ,vb)                      &
                      *( x2*(dz_t(i,j,k,after)+dz_t(i,j,k,now   ))  &   !01-05-11
                        +x1*(dz_t(i,j,k,now  )+dz_t(i,j,k,before))) &

            -anyv3d(i,j,k,0 )*bio_t(i+2,j  ,k  ,vb)                  &
            -anyv3d(i,j,k,1 )*bio_t(i+1,j  ,k  ,vb)                  &
            -anyv3d(i,j,k,2 )*bio_t(i  ,j  ,k  ,vb)                  &
            -anyv3d(i,j,k,3 )*bio_t(i-1,j  ,k  ,vb)                  &
            -anyv3d(i,j,k,4 )*bio_t(i-2,j  ,k  ,vb)                  &
            -anyv3d(i,j,k,5 )*bio_t(i  ,j+2,k  ,vb)                  &
            -anyv3d(i,j,k,6 )*bio_t(i  ,j+1,k  ,vb)                  &
            -anyv3d(i,j,k,7 )*bio_t(i  ,j-1,k  ,vb)                  &
            -anyv3d(i,j,k,8 )*bio_t(i  ,j-2,k  ,vb)                  &
            -anyv3d(i,j,k,9 )*bio_t(i  ,j  ,kp2,vb)                  &
            -anyv3d(i,j,k,10)*bio_t(i  ,j  ,kp1,vb)                  &
            -anyv3d(i,j,k,11)*bio_t(i  ,j  ,km1,vb)                  &
            -anyv3d(i,j,k,12)*bio_t(i  ,j  ,km2,vb)                  &

                   )/( x4*(dz_t(i,j,k,after)+dz_t(i,j,k,now   ))   &  !01-05-11
                      +x3*(dz_t(i,j,k,now  )+dz_t(i,j,k,before)))

       enddo    !i
       enddo    !j
      enddo    !k

! update bio_t (move anyv3d on bio_t) and bottom boundary condition
       call advection_biofinalize(13) !25-03-15

      enddo    !vb

!     stop 'ca ne va pas ces c.l.'
      call obc_bio(1)        ! rivieres
!     call obc_bio_mpi('zb') !06-02-14

      enddo    !loop_

      end subroutine advection_bioup3
#endif
!________________________________________________________________________________

      subroutine advection_bio_tvd_pmx
      use module_principal
      use module_parallele
      implicit none
      integer loop_
#ifdef synopsis
       subroutinetitle='advection_bio_tvd_pmx'
       subroutinedescription=' '
       call main_synopsis(subroutinetitle,subroutinedescription)
#endif

!...................................................................!
! Un schema TVD est un hybride schema centre schema upwind. Les multiples
! versions existantes correspondent a l'art de passer de l'un a l'autre schema.
! Ici une version inspiree du Lax-Wendrof qui differe de ce dernier par sa
! ponderation donnant plus d'importance au schema upwind. Le schema est lineaire
! (du point de vue du traceur), de sorte qu'il est possible de construire une
! matrice d'advection valable quelque soit le traceur.


!     substep_advbio est defini dans namelist "notebook_advection"
      const1=0.5*dti_fw/real(substep_advbio) !06-10-13

      do j=1,jmax ; do i=1,imax
       xy_t(i,j,0)=1. ! Sert a annuler omega(kmax+1) si omega(kmax+1)>0
      enddo ; enddo

      do  k=1,kmax ! Boucle forcement croissante

       k0=1
       if(k==kmax) then ! -- Surface case --> (note: useless if omega(kmax+1)==0)
        k0=0            ! Schema 100%up2 si k0=0, schema tvd si k0=1
        do j=1,jmax ; do i=1,imax
         if(omega_w(i,j,kmax+1,1)>0.)xy_t(i,j,0)=0. ! No upward flux across surface
        enddo       ; enddo
       endif            ! -- Surface case -->


      do  j=1,jmax
      do  i=1,imax

      x1=min(max(   vel_u(i+1,j,k,1)*dti_fw/dx_u(i+1,j),-un),un)
      x2=min(max(   vel_u(i  ,j,k,1)*dti_fw/dx_u(i  ,j),-un),un)
      x3=min(max(   vel_v(i,j+1,k,1)*dti_fw/dy_v(i,j+1),-un),un)
      x4=min(max(   vel_v(i,j  ,k,1)*dti_fw/dy_v(i,j  ),-un),un)

      x5=min(max(   omega_w(i,j,k+1,1)*dti_fw*xy_t(i,j,0)   &
               /(   depth_t(i,j,k+1)                        &
                   -depth_t(i,j,k  )),-un),un)

      x6=min(max(   omega_w(i,j,k  ,1)*dti_fw   &
               /(   depth_t(i,j,k  )            &
                   -depth_t(i,j,k-1)),-un),un)

! A ce stade x1 et cie est une fonction lineaire de nc comprise entre -1 et 1
! On transforme ensuite en une fonction comprise entre 0.5 et 1 (nc>0) et
! entre -1 et -0.5 (nc<0):
!     x1=sign( 0.5+0.5*x1**2           , x1)
!     x2=sign( 0.5+0.5*x2**2           , x2)
!     x3=sign( 0.5+0.5*x3**2           , x3)
!     x4=sign( 0.5+0.5*x4**2           , x4)
!     x5=sign((0.5+0.5*x5**2)*k0+1.-k0 , x5)
!     x6=sign( 0.5+0.5*x6**2           , x6)

! Multiplier par le masque force le mode 100%up2 si mask=0. En apparence c'est inutile sauf que ce procede
! impose un schema upwind au point source des fleuves ou uv/=0 mais mask=0...
      x1=sign( 1.-0.5*(1-x1**2)*mask_u(i+1,j  ,k), x1)
      x2=sign( 1.-0.5*(1-x2**2)*mask_u(i  ,j  ,k), x2)
      x3=sign( 1.-0.5*(1-x3**2)*mask_v(i  ,j+1,k), x3)
      x4=sign( 1.-0.5*(1-x4**2)*mask_v(i  ,j  ,k), x4)
      x5=sign( 1.-0.5*(1-x5**2)*k0               , x5)
      x6=sign( 1.-0.5*(1-x6**2)                  , x6)

! Coef en facteur de bio_z(i,j,k):
      anyv3d(i,j,k,0)=                                               &
       (  veldydz_u(i+1,j  ,k  ,1)*const1*(-1.-x1)                   &
         +veldydz_u(i  ,j  ,k  ,1)*const1*( 1.-x2)                   &
         +veldxdz_v(i  ,j+1,k  ,1)*const1*(-1.-x3)                   &
         +veldxdz_v(i  ,j  ,k  ,1)*const1*( 1.-x4)  )/dxdy_t(i,j)    &
           +omega_w(i  ,j  ,k+1,1)*const1*(-1.-x5)*xy_t(i,j,0)       &
           +omega_w(i  ,j  ,k  ,1)*const1*( 1.-x6)

! Coef en facteur de bio_t(i+1,j,k):
      anyv3d(i,j,k,1)=veldydz_u(i+1,j  ,k  ,1)*const1*(-1.+x1)/dxdy_t(i,j)

! Coef en facteur de bio_t(i-1,j,k):
      anyv3d(i,j,k,2)=veldydz_u(i  ,j  ,k  ,1)*const1*( 1.+x2)/dxdy_t(i,j)

! Coef en facteur de bio_t(i,j+1,k):
      anyv3d(i,j,k,3)=veldxdz_v(i  ,j+1,k  ,1)*const1*(-1.+x3)/dxdy_t(i,j)

! Coef en facteur de bio_t(i,j-1,k):
      anyv3d(i,j,k,4)=veldxdz_v(i  ,j  ,k  ,1)*const1*( 1.+x4)/dxdy_t(i,j)

! Coef en facteur de bio_t(i,j,k+1):
      anyv3d(i,j,k,5)=omega_w(i  ,j  ,k+1,1)*const1*(-1.+x5)*xy_t(i,j,0)

! Coef en facteur de bio_t(i,j,k-1):
      anyv3d(i,j,k,6)=omega_w(i  ,j  ,k  ,1)*const1*( 1.+x6)

!     endif                            !********************>
      enddo
      enddo
      enddo

      do loop_=1,substep_advbio

      call obc_bio_botsurf   ! obligatoirement avant obc_bio(1)
      call obc_bio(1)        ! rivieres
      call obc_bio_mpi('z1') !04-07-16

      rap2=real(loop_  )/real(substep_advbio)          !01-05-11
      rap1=real(loop_-1)/real(substep_advbio)          !01-05-11

      x1=(1.-rap1)*0.5
      x2=    rap1 *0.5
      x3=(1.-rap2)*0.5
      x4=    rap2 *0.5
! Uncomment this line to check the CFL criteria:
!     call advection_bioup_check_cfl    ! 23-11-11

! Note: si substep_advbio=1 rap2=1 rap1=0 x4=0.5 x3=0 x2=0 x1=0.5 -> dz(t+1/2)=0.5*(dz(t+1)+dz(t))
!                                                           dz(t-1/2)=0.5*(dz(t)+dz(t-1))

      do vb=1,vbmax
!     do vb=2,2
      do k=1,kmax
      do j=1,jmax
      do i=1,imax

      anyv3d(i,j,k,7)=(bio_t(i  ,j  ,k  ,vb)                       &
                     *( x2*(dz_t(i,j,k,after)+dz_t(i,j,k,now   ))  &   !01-05-11
                       +x1*(dz_t(i,j,k,now  )+dz_t(i,j,k,before))) &

           +anyv3d(i,j,k,0)*bio_t(i  ,j  ,k  ,vb)                  &
           +anyv3d(i,j,k,1)*bio_t(i+1,j  ,k  ,vb)                  &
           +anyv3d(i,j,k,2)*bio_t(i-1,j  ,k  ,vb)                  &
           +anyv3d(i,j,k,3)*bio_t(i  ,j+1,k  ,vb)                  &
           +anyv3d(i,j,k,4)*bio_t(i  ,j-1,k  ,vb)                  &
           +anyv3d(i,j,k,5)*bio_t(i  ,j  ,k+1,vb)                  &
           +anyv3d(i,j,k,6)*bio_t(i  ,j  ,k-1,vb)                  &
                   )/( x4*(dz_t(i,j,k,after)+dz_t(i,j,k,now   ))   &  !01-05-11
                      +x3*(dz_t(i,j,k,now  )+dz_t(i,j,k,before)))

      enddo    !i
      enddo    !j
      enddo    !k

!     call advection_bio_test_pmx1
! update bio_t (move anyv3d on bio_t) and bottom boundary condition
       call advection_biofinalize(7) !25-03-15

      enddo    !vb

!     call obc_bio_mpi('z1') !06-02-14

      enddo    !loop_

      end subroutine advection_bio_tvd_pmx

!.....................................................................
#ifdef bidon
      subroutine advection_bioup3_classico
      use module_principal
      implicit none
      integer loop_
#ifdef synopsis
       subroutinetitle='advection_bioup3_classico'
       subroutinedescription=' '
       call main_synopsis(subroutinetitle,subroutinedescription)
#endif

      do loop_=1,substep_advbio

      do vb=1,vbmax


      const1=0.5*dti_fw
      const2=1./3.

      do k=1,kmax
      kp1=min0(k+1,kmax)
      km1=max0(k-1,1)

      do j=1,jmax
      do i=1,imax+1

      i1=i-( nint(sign(un,veldydz_u(i,j,k,1))) + 1 )/2

! Flux x:
      anyv3d(i,j,k,1)=-veldydz_u(i,j,k,1)*const1*(        &

            (  bio_t(i   ,j,k,vb)+bio_t(i-1 ,j,k,vb)     &

       -const2*( mask_t(i1+1,j,k)                 &!31-12-10
                *(bio_t(i1+1,j,k,vb)              &
                 -bio_t(i1  ,j,k,vb))             &

              -(  bio_t(i1  ,j,k,vb)              &
                 -bio_t(i1-1,j,k,vb)              &
               )*mask_t(i1-1,j,k) ) )  )


      enddo
      enddo

      do j=1,jmax+1
      do i=1,imax

      j1=j-( nint(sign(un,veldxdz_v(i,j,k,1))) + 1 )/2

! Flux y:
      anyv3d(i,j,k,2)=-veldxdz_v(i,j,k,1)*const1*(                  &

           ( bio_t(i,j   ,k,vb)+bio_t(i,j-1 ,k,vb)                  &


       -const2*( mask_t(i,j1+1,k)                                 &
                *(bio_t(i,j1+1,k,vb)                               &
                 -bio_t(i,j1  ,k,vb))                              &

              -(  bio_t(i,j1  ,k,vb)                               &
                 -bio_t(i,j1-1,k,vb)                               &
               )*mask_t(i,j1-1,k) ) )  )


      enddo
      enddo
      enddo


! C.L. fond et surface
      do j=-1,jmax+2
      do i=-1,imax+2
       bio_t(i,j,kmax+1       ,vb)=bio_t(i,j,kmax       ,vb)
       bio_t(i,j,kmin_w(i,j)-1,vb)=bio_t(i,j,kmin_w(i,j),vb)
      enddo
      enddo

      const2=1./3.
      const3=0.5*const2                    !10-02-11

       do k=2,kmax
       do j=1,jmax
       do i=1,imax

       k1=k-( nint(sign(un,omega_w(i,j,k,1))) + 1 )/2

! Flux T:
       anyv3d(i,j,k,3)=-omega_w(i,j,k,1)*const1*(             &

                       (bio_t(i,j,k,vb)+bio_t(i,j,k-1,vb)     &

        -const3*(depth_t(i,j,k1+1)-depth_t(i,j,k1-1))         &!10-02-11
                              *( (   bio_t(i,j,k1+1,vb)       &
                                    -bio_t(i,j,k1  ,vb) )     &
                                /( depth_t(i,j,k1+1  )        &
                                  -depth_t(i,j,k1    ) )      &
                                -(   bio_t(i,j,k1  ,vb)       &
                                    -bio_t(i,j,k1-1,vb) )     &
                                /( depth_t(i,j,k1    )        &
                                  -depth_t(i,j,k1-1  ) ) ) )  )


      enddo
      enddo
      enddo

      rap2=real(loop_  )/real(substep_advbio)          !01-05-11
      rap1=real(loop_-1)/real(substep_advbio)          !01-05-11
      x1=(1.-rap1)*0.5
      x2=    rap1 *0.5
      x3=(1.-rap2)*0.5
      x4=    rap2 *0.5
      do j=1,jmax
      do i=1,imax
       anyv3d(i,j,1     ,3)=0.
       anyv3d(i,j,kmax+1,3)=0.
      enddo
      enddo
      do k=1,kmax
      do j=1,jmax
      do i=1,imax

         bio_t(i,j,k,vb)=(                                            &

         bio_t(i,j,k,vb)*( x2*(dz_t(i,j,k,after)+dz_t(i,j,k,now   ))  & !01-05-11
                          +x1*(dz_t(i,j,k,now  )+dz_t(i,j,k,before))) &

! Advection:
       +( anyv3d(i+1,j  ,k  ,1)                          &
         -anyv3d(i  ,j  ,k  ,1)                          &
         +anyv3d(i  ,j+1,k  ,2)                          &
         -anyv3d(i  ,j  ,k  ,2) )/dxdy_t(i,j)            &
         +anyv3d(i  ,j  ,k+1,3)                          &
         -anyv3d(i  ,j  ,k  ,3)                          &

                       )/( x4*(dz_t(i,j,k,after)+dz_t(i,j,k,now   ))  & !01-05-11
                          +x3*(dz_t(i,j,k,now  )+dz_t(i,j,k,before)))

       enddo
       enddo
       enddo

       enddo !vb

! C.L. sous le fond pour le cas (toujours possible) de la grille sigma step
      do j=1,jmax ; do i=1,imax
       do k=1,kmin_w(i,j)-1
          do vb=1,vbmax
           bio_t(i,j,k,vb)=bio_t(i,j,kmin_w(i,j),vb)
          enddo
       enddo
      enddo ; enddo

!     call obc_bio_mpi('zb') !06-02-14

      enddo ! loop_

      end subroutine advection_bioup3_classico
#endif
!.....................................................................

      subroutine advection_bioup2up3
      use module_principal
      use module_parallele
      implicit none
      double precision abs_x1_,abs_x2_,sch1_,sch2_
      integer loop_,mskp2_,mskp1_,mskm1_,mskm2_
#ifdef synopsis
       subroutinetitle='advection_bioup2up3'
       subroutinedescription=' '
       call main_synopsis(subroutinetitle,subroutinedescription)
#endif

! Hybride Schema UP3 / schema UPWIND (UP2)
! La transition de l'UP3 à l'UP2 se fait sur NC la valeur du Nombre de Courant
! Si NC=0 schema 100% UP3 , si NC=1 schema 100% UP2

      if(iteration3d==0.or.iteration3d==iteration3d_restart)call advection_bioup3_checkdim !17-03-16

      const1=dti_fw/(12.*real(substep_advbio))
      do  j=1,jmax ; do  i=1,imax
       xy_t(i,j,1)=const1/dxdy_t(i,j)
      enddo        ; enddo

      do  k=1,kmax
      do  j=1,jmax
      do  i=1,imax

! Multiplier par le masque force le mode 100%up2 si mask=0. En apparence c'est inutile sauf que ce procede
! impose un schema upwind au point source des fleuves ou u/=0 mais mask=0...
! NOTE pour modif possible: le nombre de courant est calcule sur la base du pas de temps dti_fw alors qu'en
! toute rigueur on devrait faire ce calcul A partir du sous pas de temps dti_fw/substep_advbio

      sch2_=((1.-min(abs(vel_u(i+1,j,k,1)*dti_fw/dx_u(i+1,j)),un))**2) &! 1.-abs( Nb de courant ) compris entre 0 et 1
                       *mask_u(i+1,j,kmax)                             &
                    *wetmask_u(i+1,j)                                  &!19-07-15
           *0.5*(upwindriver_t(i+1,j)+upwindriver_t(i,j))

      sch1_=((1.-min(abs(vel_u(i  ,j,k,1)*dti_fw/dx_u(i  ,j)),un))**2) &
                       *mask_u(i  ,j,kmax)                             &
                    *wetmask_u(i  ,j)                                  &
           *0.5*(upwindriver_t(i  ,j)+upwindriver_t(i-1,j))
! (pour donner plus d'importance a l'up2, on a eleve au carre)

!     sch2_=1. ; sch1_=1.  ! schema 100% up3
!     sch2_=0. ; sch1_=0.  ! schema 100% up2

      x2=veldydz_u(i+1,j,k,1)*xy_t(i,j,1)
      x1=veldydz_u(i  ,j,k,1)*xy_t(i,j,1)

! Si sch=1 schema 100% up3 car nombre de courant=0: abs_x=abs(x)
! Si sch=0 schema 100% up2 car nombre de courant=1: abs_x=abs(x)*3
      abs_x2_=abs(x2)*(3.-2.*sch2_)
      abs_x1_=abs(x1)*(3.-2.*sch1_)

! Coef en facteur de bio_t(i+2,j,k):
      anyv3d(i,j,k,0)=(-x2+abs_x2_)*mask_t(i+2,j,kmax)*sch2_

! Coef en facteur de bio_t(i+1,j,k):
      anyv3d(i,j,k,1)=x2* (6.+mask_t(i+2,j,kmax)*sch2_)   &
                 -abs_x2_*(2.+mask_t(i+2,j,kmax)*sch2_)   &
             -(                                        &
                (-x1+abs_x1_)*mask_t(i+1,j,kmax)*sch1_    &
              )

! Coef en facteur de bio_t(i,j,k):
      anyv3d(i,j,k,2)=x2* (6.+mask_t(i-1,j,kmax)*sch2_)   &
                 +abs_x2_*(2.+mask_t(i-1,j,kmax)*sch2_)   &
             -(                                        &
                      x1* (6.+mask_t(i+1,j,kmax)*sch1_)   &
                 -abs_x1_*(2.+mask_t(i+1,j,kmax)*sch1_)   &
              )

! Coef en facteur de bio_t(i-1,j,k):
      anyv3d(i,j,k,3)=(-x2-abs_x2_)*mask_t(i-1,j,kmax)*sch2_ &
             -(                                           &
                        x1* (6.+mask_t(i-2,j,kmax)*sch1_)    &
                   +abs_x1_*(2.+mask_t(i-2,j,kmax)*sch1_)    &
              )

! Coef en facteur de bio_t(i-2,j,k):
      anyv3d(i,j,k,4)=-(-x1-abs_x1_)*mask_t(i-2,j,kmax)*sch1_

      enddo
      enddo
      enddo

      do  k=1,kmax
      do  j=1,jmax
      do  i=1,imax

! Multiplier par le masque force le mode 100%up2 si mask=0. En apparence c'est inutile sauf que ce procede
! impose un schema upwind au point source des fleuves ou v/=0 mais mask=0...
      sch2_=((1.-min(abs(vel_v(i,j+1,k,1)*dti_fw/dy_v(i,j+1)),un))**2) &
                       *mask_v(i,j+1,kmax)                             &
                    *wetmask_v(i,j+1)                                  &
           *0.5*(upwindriver_t(i,j+1)+upwindriver_t(i,j)) !19-07-15

      sch1_=((1.-min(abs(vel_v(i,j  ,k,1)*dti_fw/dy_v(i,j  )),un))**2) &
                       *mask_v(i,j  ,kmax)                             &
                    *wetmask_v(i,j  )                                  &
           *0.5*(upwindriver_t(i,j  )+upwindriver_t(i,j-1))
! (pour donner plus d'importance a l'up2, on a eleve au carre)

!     sch2_=1. ; sch1_=1.  ! schema 100% up3
!     sch2_=0. ; sch1_=0.  ! schema 100% up2

      x2=veldxdz_v(i,j+1,k,1)*xy_t(i,j,1)
      x1=veldxdz_v(i,j  ,k,1)*xy_t(i,j,1)

! Si sch=1 schema 100% up3 car nombre de courant=0: abs_x=abs(x)
! Si sch=0 schema 100% up2 car nombre de courant=1: abs_x=abs(x)*3
      abs_x2_=abs(x2)*(3.-2.*sch2_)
      abs_x1_=abs(x1)*(3.-2.*sch1_)

! Coef en facteur de bio_t(i,j+2,k):
      anyv3d(i,j,k,5)=(-x2+abs_x2_)*mask_t(i,j+2,kmax)*sch2_

! Coef en facteur de bio_t(i,j+1,k):
      anyv3d(i,j,k,6)=x2* (6.+mask_t(i,j+2,kmax)*sch2_)   &
                 -abs_x2_*(2.+mask_t(i,j+2,kmax)*sch2_)   &
             -(                                        &
                (-x1+abs_x1_)*mask_t(i,j+1,kmax)*sch1_    &
              )

! Coef en facteur de bio_t(i,j,k):
      anyv3d(i,j,k,2)=                                 &
      anyv3d(i,j,k,2)+x2* (6.+mask_t(i,j-1,kmax)*sch2_)   &
                 +abs_x2_*(2.+mask_t(i,j-1,kmax)*sch2_)   &
             -(                                        &
                      x1* (6.+mask_t(i,j+1,kmax)*sch1_)   &
                 -abs_x1_*(2.+mask_t(i,j+1,kmax)*sch1_)   &
              )

! Coef en facteur de bio_t(i,j-1,k):
      anyv3d(i,j,k,7)=(-x2-abs_x2_)*mask_t(i,j-1,kmax)*sch2_ &
             -(                                           &
                        x1* (6.+mask_t(i,j-2,kmax)*sch1_)    &
                   +abs_x1_*(2.+mask_t(i,j-2,kmax)*sch1_)    &
              )

! Coef en facteur de bio_t(i,j-2,k):
      anyv3d(i,j,k,8)=-(-x1-abs_x1_)*mask_t(i,j-2,kmax)*sch1_

      enddo
      enddo
      enddo

      const1=dti_fw/(12.*real(substep_advbio))
      do j=1,jmax ; do i=1,imax
       xy_t(i,j,0)=const1
      enddo ; enddo

      do  k=1,kmax ! Boucle obligatoirement croissante a cause de xy_t(:,:,0)

       mskp2_=1 ; mskp1_=1 ; mskm1_=1 ; mskm2_=1
       if(k+2>kmax)mskp2_=0
       if(k+1>kmax)mskp1_=0
       if(k-1<1   )mskm1_=0
       if(k-2<1   )mskm2_=0

       k0=1
       if(k==kmax) then ! -- Surface case --> (note: useless if omega(kmax+1)==0)
        k0=0            ! Schema 100%up2
        do j=1,jmax ; do i=1,imax
         if(omega_w(i,j,kmax+1,1)>0.)xy_t(i,j,0)=0. ! No upward flux across surface
        enddo       ; enddo
       endif            ! -- Surface case -->

       do j=1,jmax
       do i=1,imax

       sch2_=(                                     &
             (1.-                                  &
         min(abs( omega_w(i,j,k+1,1)*dti_fw        &
               /( depth_t(i,j,k+1)                 &
                 -depth_t(i,j,k  ))),un))**2  )*k0 &! 100%up2 si k0=0
           *upwindriver_t(i,j)

       sch1_=                                      &
             (1.-                                  &
         min(abs( omega_w(i,j,k  ,1)*dti_fw        &
               /( depth_t(i,j,k  )                 &
                 -depth_t(i,j,k-1))),un))**2       &
           *upwindriver_t(i,j)

!      sch2_=1. ; sch1_=1.  ! schema 100% up3
!      sch2_=0. ; sch1_=0.  ! schema 100% up2

       x2=omega_w(i,j,k+1,1)*xy_t(i,j,0) ! k<kmax xy_t=const1, xy_t=0 si omega(kmax+1)>0 const1 sinon
       x1=omega_w(i,j,k  ,1)*const1

! Si sch=1 schema 100% up3 car nombre de courant=0: abs_x=abs(x)
! Si sch=0 schema 100% up2 car nombre de courant=1: abs_x=abs(x)*3
! sch2=0 si k=kmax (ou k+1=kmax+1) implique schema 100%up2 pour omega(kmax+1)
! donc flux (upwind) a travers la surface dans le cas nemo offline
       abs_x2_=abs(x2)*(3.-2.*sch2_)
       abs_x1_=abs(x1)*(3.-2.*sch1_)

! Coef en facteur de bio_t(i,j,k+2):
       anyv3d(i,j,k,9)=(-x2+abs_x2_)*mskp2_*sch2_

! Coef en facteur de bio_t(i,j  ,k+1):
       anyv3d(i,j,k,10)=x2* (6.+mskp2_*sch2_)   &
                   -abs_x2_*(2.+mskp2_*sch2_)   &
               -(                               &
                  (-x1+abs_x1_)*mskp1_*sch1_    &
                )

! Coef en facteur de bio_t(i,j,k):
       anyv3d(i,j,k,2)=                        &
       anyv3d(i,j,k,2)+x2* (6.+mskm1_*sch2_)   &
                  +abs_x2_*(2.+mskm1_*sch2_)   &
              -(                               &
                       x1* (6.+mskp1_*sch1_)   &
                  -abs_x1_*(2.+mskp1_*sch1_)   &
               )

! Coef en facteur de bio_t(i,j,k-1):
       anyv3d(i,j,k,11)=(-x2-abs_x2_)*mskm1_*sch2_ &
               -(                                  &
                          x1* (6.+mskm2_*sch1_)    &
                     +abs_x1_*(2.+mskm2_*sch1_)    &
                )

! Coef en facteur de bio_t(i,j,k-2):
       anyv3d(i,j,k,12)=-(-x1-abs_x1_)*mskm2_*sch1_

       enddo
       enddo
      enddo


      do loop_=1,substep_advbio

      call obc_bio_botsurf   ! obligatoirement avant obc_bio(1)
      call obc_bio(1)        ! rivieres
      call obc_bio_mpi('zb') !04-07-16

      rap2=real(loop_  )/real(substep_advbio)          !01-05-11
      rap1=real(loop_-1)/real(substep_advbio)          !01-05-11

      x1=(1.-rap1)*0.5
      x2=    rap1 *0.5
      x3=(1.-rap2)*0.5
      x4=    rap2 *0.5
! Uncomment this line to check the CFL criteria:
!     call advection_bioup_check_cfl    ! 23-11-11

! Note: si substep_advbio=1 rap2=1 rap1=0 x4=0.5 x3=0 x2=0 x1=0.5 -> dz(t+1/2)=0.5*(dz(t+1)+dz(t))
!                                                           dz(t-1/2)=0.5*(dz(t)+dz(t-1))

      do vb=1,vbmax
!     do vb=3,3
      do k=1,kmax

!... Ces 4 lignes ont ete o combien reflechies ni touchez plus svp!
       kp2=min(k+2,kmax+1) ! kp1 et kp2 doivent avoir la meme borne max sinon perte de conservation!
       kp1=min(k+1,kmax+1) ! borne kmax+1 permet de determiner une concentration pour un flux de surface
       km2=max(k-2,1)      ! zero z-gradient if z<-h
       km1=max(k-1,1)      ! zero z-gradient if z<-h
!..........


       do j=1,jmax
       do i=1,imax

       anyv3d(i,j,k,13)=(bio_t(i  ,j  ,k  ,vb)                      &
                      *( x2*(dz_t(i,j,k,after)+dz_t(i,j,k,now   ))  &   !01-05-11
                        +x1*(dz_t(i,j,k,now  )+dz_t(i,j,k,before))) &

            -anyv3d(i,j,k,0 )*bio_t(i+2,j  ,k  ,vb)                  &
            -anyv3d(i,j,k,1 )*bio_t(i+1,j  ,k  ,vb)                  &
            -anyv3d(i,j,k,2 )*bio_t(i  ,j  ,k  ,vb)                  &
            -anyv3d(i,j,k,3 )*bio_t(i-1,j  ,k  ,vb)                  &
            -anyv3d(i,j,k,4 )*bio_t(i-2,j  ,k  ,vb)                  &
            -anyv3d(i,j,k,5 )*bio_t(i  ,j+2,k  ,vb)                  &
            -anyv3d(i,j,k,6 )*bio_t(i  ,j+1,k  ,vb)                  &
            -anyv3d(i,j,k,7 )*bio_t(i  ,j-1,k  ,vb)                  &
            -anyv3d(i,j,k,8 )*bio_t(i  ,j-2,k  ,vb)                  &
            -anyv3d(i,j,k,9 )*bio_t(i  ,j  ,kp2,vb)                  &
            -anyv3d(i,j,k,10)*bio_t(i  ,j  ,kp1,vb)                  &
            -anyv3d(i,j,k,11)*bio_t(i  ,j  ,km1,vb)                  &
            -anyv3d(i,j,k,12)*bio_t(i  ,j  ,km2,vb)                  &

                   )/( x4*(dz_t(i,j,k,after)+dz_t(i,j,k,now   ))   &  !01-05-11
                      +x3*(dz_t(i,j,k,now  )+dz_t(i,j,k,before)))

       enddo    !i
       enddo    !j
      enddo    !k

!     call advection_bio_test_pmx

! update bio_t (move anyv3d on bio_t) and bottom boundary condition
       call advection_biofinalize(13) !25-03-15

      enddo    !vb

! Echanges mpi:
!     call obc_bio_mpi('zb') !06-02-14

      enddo    !loop_

      end subroutine advection_bioup2up3
!________________________________________________________________________________
#ifdef bidon
      subroutine advection_bioupclassico
      use module_principal
      use module_parallele
      implicit none
      integer loop_
#ifdef synopsis
       subroutinetitle='advection_bioupclassico'
       subroutinedescription=' '
       call main_synopsis(subroutinetitle,subroutinedescription)
#endif


      do loop_=1,substep_advbio

      call obc_bio_botsurf
      call obc_bio(1)        ! rivieres
      call obc_bio_mpi('z1') !04-07-16

      do vb=1,vbmax

      const1=dti_fw/real(substep_advbio)
      do k=1,kmax
      do j=1,jmax
      do i=1,imax+1

      anyv3d(i,j,k,1)=-const1*0.5*(                                    &
       (veldydz_u(i,j,k,1)+abs(veldydz_u(i,j,k,1)))*bio_t(i-1,j,k,vb)  &
      +(veldydz_u(i,j,k,1)-abs(veldydz_u(i,j,k,1)))*bio_t(i  ,j,k,vb)  )

      enddo
      enddo
      enddo

      const1=dti_fw/real(substep_advbio)
      do k=1,kmax
      do j=1,jmax+1
      do i=1,imax

      anyv3d(i,j,k,2)=-const1*0.5*(                                    &
       (veldxdz_v(i,j,k,1)+abs(veldxdz_v(i,j,k,1)))*bio_t(i,j-1,k,vb)  &
      +(veldxdz_v(i,j,k,1)-abs(veldxdz_v(i,j,k,1)))*bio_t(i,j  ,k,vb)  )

      enddo
      enddo
      enddo

      const1=dti_fw/real(substep_advbio)
       do k=1,kmax+1
       do j=1,jmax
       do i=1,imax

       anyv3d(i,j,k,3)=-const1*0.5*(                                &
        (omega_w(i,j,k,1)+abs(omega_w(i,j,k,1)))*bio_t(i,j,k-1,vb)  &
       +(omega_w(i,j,k,1)-abs(omega_w(i,j,k,1)))*bio_t(i,j,k  ,vb)  )

      enddo
      enddo
      enddo


      rap2=real(loop_  )/real(substep_advbio)          !01-05-11
      rap1=real(loop_-1)/real(substep_advbio)          !01-05-11
      x1=(1.-rap1)*0.5
      x2=    rap1 *0.5
      x3=(1.-rap2)*0.5
      x4=    rap2 *0.5

       sum1=0. ; sum2=0. ; sum3=0. ; sum4=0. ; sum5=0.
       do k=1,kmax
       do j=1,jmax
       do i=1,imax

       anyv3d(i,j,k,7)=(bio_t(i,j,k,vb)                         &
                  *( x2*(dz_t(i,j,k,after)+dz_t(i,j,k,now   ))  &   !01-05-11
                    +x1*(dz_t(i,j,k,now  )+dz_t(i,j,k,before))) &


       +( anyv3d(i+1,j  ,k  ,1)                              &
         -anyv3d(i  ,j  ,k  ,1)                              &
         +anyv3d(i  ,j+1,k  ,2)                              &
         -anyv3d(i  ,j  ,k  ,2) )/dxdy_t(i,j)                &
         +anyv3d(i  ,j  ,k+1,3)                              &
         -anyv3d(i  ,j  ,k  ,3)                              &

                   )/( x4*(dz_t(i,j,k,after)+dz_t(i,j,k,now   ))   &  !01-05-11
                      +x3*(dz_t(i,j,k,now  )+dz_t(i,j,k,before)))

        if(i==imax)sum5=sum5+anyv3d(i+1,j,k,1)
        if(i==1)   sum5=sum5-anyv3d(i  ,j,k,1)
        if(j==jmax)sum5=sum5+anyv3d(i,j+1,k,2)
        if(j==1   )sum5=sum5-anyv3d(i,j  ,k,2)
        if(k==kmax)sum5=sum5+anyv3d(i,j,k+1,3)*dxdy_t(i,j)
        if(k==1   )sum5=sum5-anyv3d(i,j,k  ,3)*dxdy_t(i,j)

        sum1=sum1+(anyv3d(i+1,j,k,1)-anyv3d(i,j,k,1)) &
                                   *mask_t(i,j,k)

        sum2=sum2+(anyv3d(i,j+1,k,2)-anyv3d(i,j,k,2))  &
                                   *mask_t(i,j,k)

        sum3=sum3+(anyv3d(i,j,k+1,3)-anyv3d(i,j,k,3))*dxdy_t(i,j) &
                                   *mask_t(i,j,k)

        sum4=sum4+(                                                   &
         anyv3d(i,j,k,7)*( x4*(dz_t(i,j,k,after)+dz_t(i,j,k,now   ))  &
                          +x3*(dz_t(i,j,k,now  )+dz_t(i,j,k,before))) &
                        *dxdy_t(i,j)                                  &
       -bio_t(i,j,k,vb) *( x2*(dz_t(i,j,k,after)+dz_t(i,j,k,now   ))  &
                          +x1*(dz_t(i,j,k,now  )+dz_t(i,j,k,before))) &
                        *dxdy_t(i,j)   )                              &
                                   *mask_t(i,j,k)

       enddo
       enddo
       enddo

       do k=1,kmax
       do j=1,jmax
       do i=1,imax
         bio_t(i,j,k,vb)=anyv3d(i,j,k,7)
       enddo
       enddo
       enddo

      enddo !vb

!     call obc_bio_mpi('z1') !06-02-14

      enddo ! loop_

      end subroutine advection_bioupclassico
#endif
!.....................................................................
#ifdef bidon
      subroutine advection_bio_test_pmx
      use module_principal
      use module_parallele
      implicit none
      sum1=0.
      sum3=0.
      do k=1,kmax
       kp2=min(k+2,kmax+1) ! zero z-gradient if z>0
       kp1=min(k+1,kmax+1) ! zero z-gradient if z>0
       km2=max(k-2,1)      ! zero z-gradient if z<-h
       km1=max(k-1,1)      ! zero z-gradient if z<-h
       do j=1,jmax
       do i=1,imax
        sum1=sum1+(                                                   &
        anyv3d(i,j,k,13)*( x4*(dz_t(i,j,k,after)+dz_t(i,j,k,now   ))  &
                          +x3*(dz_t(i,j,k,now  )+dz_t(i,j,k,before))) &
                        *dxdy_t(i,j)                                  &
       -bio_t(i,j,k,vb) *( x2*(dz_t(i,j,k,after)+dz_t(i,j,k,now   ))  &
                          +x1*(dz_t(i,j,k,now  )+dz_t(i,j,k,before))) &
                        *dxdy_t(i,j)   )                              &
                 *mask_i_w(i)*mask_j_w(j)                             &
                 *mask_t(i,j,k)
        sum3=sum3+(                                                   &
            -anyv3d(i,j,k,0 )*bio_t(i+2,j  ,k  ,vb)                  &
            -anyv3d(i,j,k,1 )*bio_t(i+1,j  ,k  ,vb)                  &
            -anyv3d(i,j,k,2 )*bio_t(i  ,j  ,k  ,vb)                  &
            -anyv3d(i,j,k,3 )*bio_t(i-1,j  ,k  ,vb)                  &
            -anyv3d(i,j,k,4 )*bio_t(i-2,j  ,k  ,vb)                  &
            -anyv3d(i,j,k,5 )*bio_t(i  ,j+2,k  ,vb)                  &
            -anyv3d(i,j,k,6 )*bio_t(i  ,j+1,k  ,vb)                  &
            -anyv3d(i,j,k,7 )*bio_t(i  ,j-1,k  ,vb)                  &
            -anyv3d(i,j,k,8 )*bio_t(i  ,j-2,k  ,vb)                  &
            -anyv3d(i,j,k,9 )*bio_t(i  ,j  ,kp2,vb)                  &
            -anyv3d(i,j,k,10)*bio_t(i  ,j  ,kp1,vb)                  &
            -anyv3d(i,j,k,11)*bio_t(i  ,j  ,km1,vb)                  &
            -anyv3d(i,j,k,12)*bio_t(i  ,j  ,km2,vb) )                &
                        *dxdy_t(i,j)                                 &
                 *mask_i_w(i)*mask_j_w(j)                            &
                 *mask_t(i,j,k)
#ifdef synopsis
       subroutinetitle='advection_bio_test_pmx'
       subroutinedescription=' '
       call main_synopsis(subroutinetitle,subroutinedescription)
#endif

!       if(mask_t(i,j,k)==1)write(6,*)mask_t(i,j,k),bio_t(i  ,j  ,k  ,vb)

       enddo
       enddo
      enddo
      sum2=0.
      k=kmax+1
      do j=1,jmax
      do i=1,imax
       if(omega_w(i,j,k,1)>0.) then
        k1=kmax
       else
        k1=kmax+1
       endif
       sum2=                                         &
       sum2-min(omega_w(i,j,k,1),zero)               &
            *dxdy_t(i,j)*dti_fw/real(substep_advbio) &
                    *bio_t(i,j,k1,vb)                &
                         *mask_t(i,j,k)              &
                       *mask_i_w(i)                  &
                       *mask_j_w(j)
      enddo
      enddo
      call mpi_allreduce(sum1,sum1glb,1,mpi_double_precision,  & !#MPI
                         mpi_sum,par%comm2d,ierr)
      call mpi_allreduce(sum2,sum2glb,1,mpi_double_precision,  & !#MPI
                         mpi_sum,par%comm2d,ierr)
      call mpi_allreduce(sum3,sum3glb,1,mpi_double_precision,  & !#MPI
                         mpi_sum,par%comm2d,ierr)
      if(par%rank==0) then
       write(6,*)'------'
       write(6,*)'sum1  ',sum1glb
       write(6,*)'sum2  ',sum2glb
       write(6,*)'sum3  ',sum3glb
      endif
      end subroutine advection_bio_test_pmx
#endif
!.....................................................................
#ifdef bidon
      subroutine advection_bio_test_pmx1
      use module_principal
      use module_parallele
      implicit none
#ifdef synopsis
       subroutinetitle='advection_bio_test_pmx1'
       subroutinedescription=' '
       call main_synopsis(subroutinetitle,subroutinedescription)
#endif

      sum1=0.
      do k=1,kmax
       do j=1,jmax
       do i=1,imax
        sum1=sum1+(                                                   &
        anyv3d(i,j,k, 7)*( x4*(dz_t(i,j,k,after)+dz_t(i,j,k,now   ))  &
                          +x3*(dz_t(i,j,k,now  )+dz_t(i,j,k,before))) &
                        *dxdy_t(i,j)                                  &
       -bio_t(i,j,k,vb) *( x2*(dz_t(i,j,k,after)+dz_t(i,j,k,now   ))  &
                          +x1*(dz_t(i,j,k,now  )+dz_t(i,j,k,before))) &
                        *dxdy_t(i,j)   )                              &
                 *mask_i_w(i)*mask_j_w(j)                             &
                 *mask_t(i,j,k)
       enddo
       enddo
      enddo
      sum2=0.
      k=kmax+1
      do j=1,jmax
      do i=1,imax
       if(omega_w(i,j,k,1)>0.) then
        k1=kmax
       else
        k1=kmax+1
       endif
       sum2=                                         &
       sum2-min(omega_w(i,j,k,1),zero)               &
            *dxdy_t(i,j)*dti_fw/real(substep_advbio) &
                    *bio_t(i,j,k1,vb)                &
                         *mask_t(i,j,k)              &
                       *mask_i_w(i)                  &
                       *mask_j_w(j)
      enddo
      enddo
      call mpi_allreduce(sum1,sum1glb,1,mpi_double_precision,  & !#MPI
                         mpi_sum,par%comm2d,ierr)
      call mpi_allreduce(sum2,sum2glb,1,mpi_double_precision,  & !#MPI
                        mpi_sum,par%comm2d,ierr)
      if(par%rank==0) then
       write(6,*)'------'
       write(6,*)'sum1  ',sum1glb
       write(6,*)'sum2  ',sum2glb
      endif
      end subroutine advection_bio_test_pmx1
#endif
!________________________________________________________________________________
#ifdef bidon
      subroutine advection_biotvdclassico
      use module_principal
      use module_parallele
      implicit none
      integer loop_
#ifdef synopsis
       subroutinetitle='advection_biotvdclassico'
       subroutinedescription=' '
       call main_synopsis(subroutinetitle,subroutinedescription)
#endif

      do loop_=1,substep_advbio

      call obc_bio_botsurf
      call obc_bio(1)        ! rivieres
      call obc_bio_mpi('z1') !04-07-16

      do vb=1,vbmax

      const1=dti_fw/real(substep_advbio)
      do k=1,kmax
      do j=1,jmax
      do i=1,imax+1

      x1=min(max(   vel_u(i  ,j,k,1)*dti_fw/dx_u(i  ,j),-un),un)
      x1=sign( 1.-0.5*(1-x1**2)*mask_u(i  ,j  ,k), x1)

      anyv3d(i,j,k,1)=-const1*0.5*(                      &
       veldydz_u(i,j,k,1)*(1.+x1)*bio_t(i-1,j,k,vb)      &
      +veldydz_u(i,j,k,1)*(1.-x1)*bio_t(i  ,j,k,vb)  )

      enddo
      enddo
      enddo

      const1=dti_fw/real(substep_advbio)
      do k=1,kmax
      do j=1,jmax+1
      do i=1,imax

      x1=min(max(   vel_v(i,j  ,k,1)*dti_fw/dy_v(i,j  ),-un),un)
      x1=sign( 1.-0.5*(1-x1**2)*mask_v(i  ,j  ,k), x1)

      anyv3d(i,j,k,2)=-const1*0.5*(                    &
       veldxdz_v(i,j,k,1)*(1.+x1)*bio_t(i,j-1,k,vb)    &
      +veldxdz_v(i,j,k,1)*(1.-x1)*bio_t(i,j  ,k,vb)  )

      enddo
      enddo
      enddo

      const1=dti_fw/real(substep_advbio)
       do k=1,kmax+1
       do j=1,jmax
       do i=1,imax

      x1=min(max(   omega_w(i,j,k  ,1)*dti_fw   &
               /(   depth_t(i,j,k  )            &
                   -depth_t(i,j,k-1)),-un),un)
      x1=sign( 1.-0.5*(1-x1**2)                  , x1)

       anyv3d(i,j,k,3)=-const1*0.5*(                   &
        omega_w(i,j,k,1)*(1.+x1)*bio_t(i,j,k-1,vb)     &
       +omega_w(i,j,k,1)*(1.-x1)*bio_t(i,j,k  ,vb)  )

      enddo
      enddo
      enddo

      rap2=real(loop_  )/real(substep_advbio)          !01-05-11
      rap1=real(loop_-1)/real(substep_advbio)          !01-05-11
      x1=(1.-rap1)*0.5
      x2=    rap1 *0.5
      x3=(1.-rap2)*0.5
      x4=    rap2 *0.5


       sum1=0. ; sum2=0. ; sum3=0. ; sum4=0. ; sum5=0.
       do k=1,kmax
       do j=1,jmax
       do i=1,imax

       anyv3d(i,j,k,7)=(bio_t(i,j,k,vb)                         &
                  *( x2*(dz_t(i,j,k,after)+dz_t(i,j,k,now   ))  &   !01-05-11
                    +x1*(dz_t(i,j,k,now  )+dz_t(i,j,k,before))) &


       +( anyv3d(i+1,j  ,k  ,1)                              &
         -anyv3d(i  ,j  ,k  ,1)                              &
         +anyv3d(i  ,j+1,k  ,2)                              &
         -anyv3d(i  ,j  ,k  ,2) )/dxdy_t(i,j)                &
         +anyv3d(i  ,j  ,k+1,3)                              &
         -anyv3d(i  ,j  ,k  ,3)                              &

                   )/( x4*(dz_t(i,j,k,after)+dz_t(i,j,k,now   ))   &  !01-05-11
                      +x3*(dz_t(i,j,k,now  )+dz_t(i,j,k,before)))

        if(i==imax)sum5=sum5+anyv3d(i+1,j,k,1)
        if(i==1)   sum5=sum5-anyv3d(i  ,j,k,1)
        if(j==jmax)sum5=sum5+anyv3d(i,j+1,k,2)
        if(j==1   )sum5=sum5-anyv3d(i,j  ,k,2)
        if(k==kmax)sum5=sum5+anyv3d(i,j,k+1,3)*dxdy_t(i,j)
        if(k==1   )sum5=sum5-anyv3d(i,j,k  ,3)*dxdy_t(i,j)

        sum1=sum1+(anyv3d(i+1,j,k,1)-anyv3d(i,j,k,1)) &
                                   *mask_t(i,j,k)

        sum2=sum2+(anyv3d(i,j+1,k,2)-anyv3d(i,j,k,2))  &
                                   *mask_t(i,j,k)

        sum3=sum3+(anyv3d(i,j,k+1,3)-anyv3d(i,j,k,3))*dxdy_t(i,j) &
                                   *mask_t(i,j,k)

        sum4=sum4+(                                                   &
         anyv3d(i,j,k,7)*( x4*(dz_t(i,j,k,after)+dz_t(i,j,k,now   ))  &
                          +x3*(dz_t(i,j,k,now  )+dz_t(i,j,k,before))) &
                        *dxdy_t(i,j)                                  &
       -bio_t(i,j,k,vb) *( x2*(dz_t(i,j,k,after)+dz_t(i,j,k,now   ))  &
                          +x1*(dz_t(i,j,k,now  )+dz_t(i,j,k,before))) &
                        *dxdy_t(i,j)   )                              &
                                   *mask_t(i,j,k)

       enddo
       enddo
       enddo

       do k=1,kmax
       do j=1,jmax
       do i=1,imax
         bio_t(i,j,k,vb)=anyv3d(i,j,k,7)
       enddo
       enddo
       enddo

      enddo !vb

!     call obc_bio_mpi('z1') !06-02-14

      enddo ! loop_

      end subroutine advection_biotvdclassico
#endif
!.....................................................................
      subroutine advection_biofinalize(ind4_)
      use module_principal ; use module_parallele
      implicit none
      integer ind4_
#ifdef synopsis
       subroutinetitle='advection_biofinalize'
       subroutinedescription=' '
       call main_synopsis(subroutinetitle,subroutinedescription)
#endif

      do j=1,jmax
       if(j+par%tjmax(1)>=   1+jbl1_advbio.and. &
          j+par%tjmax(1)<=jglb-jbl2_advbio) then !jjjjj>

        do i=1,imax
         if(i+par%timax(1)>=   1+ibl1_advbio.and. &
            i+par%timax(1)<=iglb-ibl2_advbio) then !iiiii>

          do k=kmin_w(i,j),kmax
           bio_t(i,j,k,vb)=anyv3d(i,j,k,ind4_)
          enddo
          do k=1,kmin_w(i,j)-1
           bio_t(i,j,k,vb)=bio_t(i,j,kmin_w(i,j),vb)
          enddo

         endif                                     !iiiii>
        enddo

       endif                                      !jjjjj>
      enddo

      end subroutine advection_biofinalize

!.........................................................................

      subroutine advection_bio_get_substep !03-07-16
      use module_principal ; use module_parallele
      implicit none


      substep_advbio=1 ! Default value

      x1=0.
      do k=1,kmax ; do j=1,jmax ; do i=1,imax

!#ifdef bidon
       x1=max(x1, &

                 wetmask_t(i,j)*dti_fw*(                               &

        ((veldydz_u(i+1,j,k,1)+abs(veldydz_u(i+1,j,k,1)))              &
        -(veldydz_u(i  ,j,k,1)-abs(veldydz_u(i  ,j,k,1)))              &
        +(veldxdz_v(i,j+1,k,1)+abs(veldxdz_v(i,j+1,k,1)))              &
        -(veldxdz_v(i,j  ,k,1)-abs(veldxdz_v(i,j  ,k,1))))/dxdy_t(i,j) &
          +(omega_w(i,j,k+1,1)+abs(  omega_w(i,j,k+1,1)))              &
          -(omega_w(i,j,k  ,1)-abs(  omega_w(i,j,k  ,1)))              &

                                       )/(2.*dz_t(i,j,k,2))            &

              )
!#endif
#ifdef bidon
       x2=       wetmask_t(i,j)*dti_fw*(                               &

        ((veldydz_u(i+1,j,k,1)+abs(veldydz_u(i+1,j,k,1)))              &
        -(veldydz_u(i  ,j,k,1)-abs(veldydz_u(i  ,j,k,1)))              &
        +(veldxdz_v(i,j+1,k,1)+abs(veldxdz_v(i,j+1,k,1)))              &
        -(veldxdz_v(i,j  ,k,1)-abs(veldxdz_v(i,j  ,k,1))))/dxdy_t(i,j) &
          +(omega_w(i,j,k+1,1)+abs(  omega_w(i,j,k+1,1)))              &
          -(omega_w(i,j,k  ,1)-abs(  omega_w(i,j,k  ,1)))              &

                                       )/(2.*dz_t(i,j,k,2))             

        if(x2>x1) then
         x1=x2 ; i1=i ; j1=j ; k1=k
        endif
#endif

               


!      if(mask_t(i,j,kmax)==1)write(20+par%rank,*)i,j,k &

!               ,wetmask_t(i,j)*dti_fw*(                               &

!       ((veldydz_u(i+1,j,k,1)+abs(veldydz_u(i+1,j,k,1)))              &
!       -(veldydz_u(i  ,j,k,1)-abs(veldydz_u(i  ,j,k,1)))              &
!       +(veldxdz_v(i,j+1,k,1)+abs(veldxdz_v(i,j+1,k,1)))              &
!       -(veldxdz_v(i,j  ,k,1)-abs(veldxdz_v(i,j  ,k,1))))/dxdy_t(i,j) &
!         +(omega_w(i,j,k+1,1)+abs(  omega_w(i,j,k+1,1)))              &
!         -(omega_w(i,j,k  ,1)-abs(  omega_w(i,j,k  ,1)))              &

!                                      )/(2.*dz_t(i,j,k,2))


      enddo ; enddo ; enddo

!     i=i1 ; j=j1 ; k=k1
!     write(20+par%rank,*)x1,i1,j1,k1                          &
!     ,veldydz_u(i,j,k,1)/dy_u(i,j)/(0.5*(dz_t(i  ,j,k,1)      &
!                                        +dz_t(i-1,j,k,1)))    &
!     ,veldxdz_v(i,j,k,1)/dx_v(i,j)/(0.5*(dz_t(i,j  ,k,1)      &
!                                        +dz_t(i,j-1,k,1)))    &
!     ,omega_w(i,j,k,1)                                        &
!     ,dy_u(i,j),dx_v(i,j),dz_t(i  ,j,k,1)


      call mpi_allreduce(x1,x2,1,mpi_double_precision,mpi_max,par%comm2d ,ierr)
      if(x2>1.)substep_advbio=int(x2)+1

      if(par%rank==0) then !>>>>>
       open(unit=3,file='tmp/substep_advbio',position='append')
       write(3,*)elapsedtime_now/86400.,substep_advbio
       close(3)
      endif                !>>>>>
!#ifdef parallele
!      call mpi_barrier(par%comm2d,k_out)      ! synchro processes
!#endif
!      stop 'bibi'

      

      end subroutine advection_bio_get_substep

!.........................................................................

      subroutine advection_bio_rmnegval !11-07-16
      use module_principal ; use module_parallele
      implicit none


! Détails et evolutions possibles dans: !06-12-16
! https://docs.google.com/document/d/15QsKJhPFiOjxU3os7omfhrhhxNYZBsRTprBmsyuNguc/edit

! Remove Negative Values 

      call obc_bio_mpi('zb') 


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! Calculer un bilan pour verification des proprietes de conservation
!     sum1=0.
!     sum2=0.
!     vb=1
!     do k=1,kmax 
!     do j=1,jmax 
!     do i=1,imax  
!      sum1=sum1+dz_t(i,j,k,2)*dxdy_t(i,j)*mask_t(i,j,k)*mask_i_w(i)*mask_j_w(j)
!      sum2=sum2+dz_t(i,j,k,2)*dxdy_t(i,j)*mask_t(i,j,k)*mask_i_w(i)*mask_j_w(j)*bio_t(i,j,k,vb)
!     enddo
!     enddo
!     enddo
!     call mpi_allreduce(sum1,sum1glb,1,mpi_double_precision,mpi_sum,par%comm2d,ierr)
!     call mpi_allreduce(sum2,sum2glb,1,mpi_double_precision,mpi_sum,par%comm2d,ierr)
!     if(par%rank==0)write(66,*)iteration3d,sum2glb/sum1glb
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


      do k=1,kmax 
      do j=1,jmax 
      do i=1,imax+1
        anyv3d(i,j,k,1)=0.25*min(dz_t(i,j,k,2),dz_t(i-1,j,k,2))*mask_u(i,j,k)
      enddo
      enddo
      enddo
! Ne pas diffuser A travers les C.L. que nous ne maitrisons pas suffisament:
      if(obcstatus(ieq1)==1)   anyv3d(1     ,:,:,1)=0.
      if(obcstatus(ieqimax)==1)anyv3d(imax+1,:,:,1)=0.
      

      do k=1,kmax 
      do j=1,jmax+1
      do i=1,imax
        anyv3d(i,j,k,2)=0.25*min(dz_t(i,j,k,2),dz_t(i,j-1,k,2))*mask_v(i,j,k)
      enddo
      enddo
      enddo
! Ne pas diffuser A travers les C.L. que nous ne maitrisons pas suffisament:
      if(obcstatus(jeq1)==1)   anyv3d(:,1     ,:,2)=0.
      if(obcstatus(jeqjmax)==1)anyv3d(:,jmax+1,:,2)=0.

      do vb=1,vbmax

      do k=1,kmax 
      do j=0,jmax+1
      do i=0,imax+1
       anyv3d(i,j,k,0)=min(bio_t(i,j,k,vb),0.)
      enddo
      enddo
      enddo

      do k=1,kmax 
      do j=1,jmax 
      do i=1,imax

        bio_t(i,j,k,vb)=   &
        bio_t(i,j,k,vb)+(  & !ooooo>

        anyv3d(i+1,j,k,1)*(anyv3d(i+1,j,k,0)-anyv3d(i,j,k,0)) &
       +anyv3d(i  ,j,k,1)*(anyv3d(i-1,j,k,0)-anyv3d(i,j,k,0)) &
       +anyv3d(i,j+1,k,2)*(anyv3d(i,j+1,k,0)-anyv3d(i,j,k,0)) &
       +anyv3d(i,j  ,k,2)*(anyv3d(i,j-1,k,0)-anyv3d(i,j,k,0)) &

                        )  & !ooooo>
                         /dz_t(i,j,k,2)
       

      enddo
      enddo
      enddo

      enddo ! vb

!     if(iteration3d==10) then
!     j=jmax/2 ; vb=1 ; k=kmax
!     do i=1,imax
!      write(20+par%rank,*)i+par%timax(1),bio_t(i,j,k,vb)
!     enddo
!     call graph_out
!     stop 'coucou'
!     endif


      end subroutine advection_bio_rmnegval

!.........................................................................

      subroutine advection_bio_substep
      use module_principal
      use module_parallele
      implicit none

!..............................................
! Determiner le nombre de sous-iterations d'advection
      x1=small2 ! et non pas zero pour eviter loopmaxbio=0
                ! si courant nul
      do k=1,kmax
       do j=1,jmax ; do i=1,imax
        xy_t(i,j,1)=      dti_fw*wetmask_t(i,j)         &
                  /(dxdy_t(i,j)*0.5*( dz_t(i,j,k,0)     &
                                     +dz_t(i,j,k,1)))
       enddo ; enddo
       do j=2,jmax-1 ; do i=2,imax
! loopmax decimal:
       x1=max(x1,abs(veldydz_u(i,j,k,1))*max(xy_t(i,j,1),xy_t(i-1,j,1)))
       enddo ; enddo
       do j=2,jmax ; do i=2,imax-1
! loopmax decimal:
       x1=max(x1,abs(veldxdz_v(i,j,k,1))*max(xy_t(i,j,1),xy_t(i,j-1,1)))
       enddo ; enddo
      enddo ! k loop

      call mpi_allreduce(x1,x2,1,mpi_double_precision,mpi_max,par%comm2d,ierr)
!     loopmaxbio=int(x2)+1   
      loopmaxbio=ceiling(x2)
      dti_fwsubio=dti_fw/loopmaxbio

      if(par%rank==0)then
       open(unit=3,file='tmp/dti_bio',position='append')
        write(3,*)real(elapsedtime_now/86400.),loopmaxbio,real(x2),real(dti_fwsubio)
       close(3)
      endif

!     write(6,*)'loopmaxbio horizontal',loopmaxbio

      end subroutine advection_bio_substep

!.................................................................

      subroutine advection_bio_quickest_coef_h
      use module_principal
      use module_parallele
      implicit none

! Cette routine etant entierement independante de vb elle
! est appellee en dehors d'une boucle sur vb

! Details en:
!   https://docs.google.com/document/d/1QLszDYbzYsIavgI1MgexRbpfEtN6rZDSzRiqdkCsIKE/edit

      do k=1,kmax  !pmpmpmpmpmpmpmpmpmpmppmpmpmpmpmpmpm> !DEBUT DE BOUCLE SUR k

       do j=0,jmax+1 ; do i=0,imax+1
        xy_t(i,j,1)=1.                                  &   
                  /(dxdy_t(i,j)*0.5*( dz_t(i,j,k,0)     &
                                     +dz_t(i,j,k,1)))
       enddo ; enddo

! Note sur le role de upwindriver
! Si upwindriver=0 c'est que le schema d'advection doit etre 100% upwind. Cette condition
! s'obtient si le nombre de courant est artificiellement imposE A 1

! Nombre de courant vis a vis de u
       do j=1,jmax
       do i=1,imax+1
        xy_u(i,j,id_ncu)=min(1.,                             & ! 
        dti_fwsubio*abs(veldydz_u(i,j,k,1))                  & ! 
                        *max(xy_t(i,j,1),xy_t(i-1,j,1)) )    & ! Cas standard
              *0.5*(upwindriver_t(i,j)+upwindriver_t(i-1,j)) & ! si upwindriver=1

          +(1.-0.5*(upwindriver_t(i,j)+upwindriver_t(i-1,j)))  ! Cas particulier upwindriver=0 !18-01-17

       enddo
       enddo

! Nombre de courant vis a vis de v
       do j=1,jmax+1
       do i=1,imax
        xy_v(i,j,id_ncv)=min(1.,                             &
        dti_fwsubio*abs(veldxdz_v(i,j,k,1))                  &
                        *max(xy_t(i,j,1),xy_t(i,j-1,1)) )    & ! Cas standard
              *0.5*(upwindriver_t(i,j)+upwindriver_t(i,j-1)) & ! si upwindriver=1

          +(1.-0.5*(upwindriver_t(i,j)+upwindriver_t(i,j-1)))  ! Cas particulier upwindriver=0 !18-01-17
       enddo
       enddo

!      i=imax/2 ; j=jmax/2
!      write(6,*)'ncu',xy_u(i,j,id_ncu)
!      write(6,*)'ncv',xy_v(i,j,id_ncv)
!      stop 'coco'

! Facteur d'echelle supplementaire
       do j=1,jmax
       do i=1,imax

       xy_t(i,j,0)=dti_fwsubio/           &
       ( dxdy_t(i,j)*0.5*(dz_t(i,j,k,0)   &
                         +dz_t(i,j,k,1)))

       enddo
       enddo

! Pre-coef etape intermediaire sur points flux u:
       do j=1,jmax
       do i=1,imax+1

! Rappel du flux quickest cas u>0
! F=u*( 0.5*(B(i)+B(i-1))-0.5*ncu*(B(i)-B(i-1))-(1-ncu**2)/6.*DRV2
! avec DRV2 la derivee seconde "masquee": B(i)-B(i-1)+(B(i-2)-B(i-1))*msk(i-2)
! Rappel du flux quickest cas u<0
! F=u*( 0.5*(B(i)+B(i-1))-0.5*ncu*(B(i-1)-B(i))-(1-ncu**2)/6.*DRV2
! avec DRV2 la derivee seconde "masquee": B(i-1)-B(i)+(B(i+1)-B(i))*msk(i+1)

        x1=0.5*(veldydz_u(i,j,k,1)+abs(veldydz_u(i,j,k,1)))
        x2=0.5*(veldydz_u(i,j,k,1)-abs(veldydz_u(i,j,k,1)))

! En facteur de B(i):
        xy_u(i,j,4)=                                              &
        x1*(0.5-0.5*xy_u(i,j,id_ncu)-(1.-xy_u(i,j,id_ncu)**2)/6.) &
       +x2*(0.5+0.5*xy_u(i,j,id_ncu)+(1.-xy_u(i,j,id_ncu)**2)*(1.+mask_t(i+1,j,k))/6.)

! En facteur de B(i-1):
        xy_u(i,j,3)=                                              &
        x1*(0.5+0.5*xy_u(i,j,id_ncu)+(1.-xy_u(i,j,id_ncu)**2)*(1.+mask_t(i-2,j,k))/6.) &
       +x2*(0.5-0.5*xy_u(i,j,id_ncu)-(1.-xy_u(i,j,id_ncu)**2)/6.)

! En facteur de B(i-2):
        xy_u(i,j,2)=-x1*(1.-xy_u(i,j,id_ncu)**2)*mask_t(i-2,j,k)/6.

! En facteur de B(i+1):
        xy_u(i,j,5)=-x2*(1.-xy_u(i,j,id_ncu)**2)*mask_t(i+1,j,k)/6.

!       if(i==imax/2.and.j==jmax/2.and.k==1) then
!        write(6,*)'flux i  ',xy_u(i,j,4)
!        write(6,*)'flux i-1',xy_u(i,j,3)
!        write(6,*)'flux i-2',xy_u(i,j,2)
!        write(6,*)'flux i+1',xy_u(i,j,5)
!       endif

       enddo
       enddo

! Coef au point t de l'equation direction Oi:
       do j=1,jmax
       do i=1,imax
! En facteur de B(i+2):
        anyv3d(i,j,k,3)=xy_t(i,j,0)*(           -xy_u(i+1,j,5))

! En facteur de B(i+1):
        anyv3d(i,j,k,2)=xy_t(i,j,0)*(xy_u(i,j,5)-xy_u(i+1,j,4))

! En facteur de B(i  ):
        anyv3d(i,j,k,1)=1.+xy_t(i,j,0)*(xy_u(i,j,4)-xy_u(i+1,j,3))

! En facteur de B(i-1):
        anyv3d(i,j,k,4)=xy_t(i,j,0)*(xy_u(i,j,3)-xy_u(i+1,j,2))

! En facteur de B(i-2):
        anyv3d(i,j,k,5)=xy_t(i,j,0)*(xy_u(i,j,2)              )

! Constante:
        anyv3d(i,j,k,6)=xy_t(i,j,0)*(veldydz_u(i+1,j,k,1)-veldydz_u(i,j,k,1))

       enddo
       enddo

! Pre-coef etape intermediaire sur points flux v:
       do j=1,jmax+1
       do i=1,imax

        x1=0.5*(veldxdz_v(i,j,k,1)+abs(veldxdz_v(i,j,k,1)))
        x2=0.5*(veldxdz_v(i,j,k,1)-abs(veldxdz_v(i,j,k,1)))

! En facteur de B(j):
        xy_v(i,j,4)=                                              &
        x1*(0.5-0.5*xy_v(i,j,id_ncv)-(1.-xy_v(i,j,id_ncv)**2)/6.) &
       +x2*(0.5+0.5*xy_v(i,j,id_ncv)+(1.-xy_v(i,j,id_ncv)**2)*(1.+mask_t(i,j+1,k))/6.)

! En facteur de B(j-1):
        xy_v(i,j,3)=                                              &
        x1*(0.5+0.5*xy_v(i,j,id_ncv)+(1.-xy_v(i,j,id_ncv)**2)*(1.+mask_t(i,j-2,k))/6.) &
       +x2*(0.5-0.5*xy_v(i,j,id_ncv)-(1.-xy_v(i,j,id_ncv)**2)/6.)

! En facteur de B(j-2):
        xy_v(i,j,2)=-x1*(1.-xy_v(i,j,id_ncv)**2)*mask_t(i,j-2,k)/6.

! En facteur de B(j+1):
        xy_v(i,j,5)=-x2*(1.-xy_v(i,j,id_ncv)**2)*mask_t(i,j+1,k)/6.

!       if(i==imax/2.and.j==jmax/2.and.k==1) then
!        write(6,*)'flux i  ',xy_v(i,j,4)
!        write(6,*)'flux i-1',xy_v(i,j,3)
!        write(6,*)'flux i-2',xy_v(i,j,2)
!        write(6,*)'flux i+1',xy_v(i,j,5)
!       endif

       enddo
       enddo

! Coef au point t de l'equation direction Oj:
       do j=1,jmax
       do i=1,imax
! En facteur de B(j+2):
        anyv3d(i,j,k,9)=xy_t(i,j,0)*(           -xy_v(i,j+1,5))

! En facteur de B(j+1):
        anyv3d(i,j,k,8)=xy_t(i,j,0)*(xy_v(i,j,5)-xy_v(i,j+1,4))

! En facteur de B(j  ):
        anyv3d(i,j,k,7)=1.+xy_t(i,j,0)*(xy_v(i,j,4)-xy_v(i,j+1,3))

! En facteur de B(j-1):
        anyv3d(i,j,k,10)=xy_t(i,j,0)*(xy_v(i,j,3)-xy_v(i,j+1,2))

! En facteur de B(j-2):
        anyv3d(i,j,k,11)=xy_t(i,j,0)*(xy_v(i,j,2)              )

! Constante:
        anyv3d(i,j,k,12)=xy_t(i,j,0)*(veldxdz_v(i,j+1,k,1)-veldxdz_v(i,j,k,1))

       enddo
       enddo

      enddo       !pmpmpmpmpmpmpmpmpmpmppmpmpmpmpmpmpm> ! FIN DE BOUCLE SUR k


      end subroutine advection_bio_quickest_coef_h

!.................................................................

      subroutine advection_bio_quickest_h
      use module_principal
      use module_parallele
      implicit none
      integer :: id_biobef_=0  & ! identifiant variable bio "before"
                ,id_bioaft_=19 & ! identifiant variable bio "after"
                ,loop_

!     j=jmax/2 ; k=1
!     do i=1,imax
!      write(65,*)i,bio_t(i,j,k,1)
!     enddo


!     do vb=1,vbmax ! vbvbvbvb> boucle placEe dans le driver

      do k=1,kmax ; do j=-1,jmax+2 ; do i=-1,imax+2
       anyv3d(i,j,k,id_biobef_)=bio_t(i,j,k,vb)
! A partir de cette ligne le tableau bio_t(i,j,k,vb) est dupliquE dans anyv3d(i,j,k,id_biobef_). Il
! devient disponible calculer le terme supplementaire assurant la propriete de conservation de 
! l'advection. Ici le reset du cumul (bio_t=0):
       bio_t(i,j,k,vb)=0. !18-01-17
      enddo ; enddo ; enddo

      do loop_=1,loopmaxbio !iterative loop>

! Advection partielle direction Oi:
       do k=1,kmax ; do j=1,jmax ; do i=1,imax

                         anyv3d(i  ,j  ,k,id_bioaft_)=                &
                         anyv3d(i  ,j  ,k,id_biobef_)*anyv3d(i,j,k,1) &
                        +anyv3d(i+1,j  ,k,id_biobef_)*anyv3d(i,j,k,2) &
                        +anyv3d(i+2,j  ,k,id_biobef_)*anyv3d(i,j,k,3) &
                        +anyv3d(i-1,j  ,k,id_biobef_)*anyv3d(i,j,k,4) &
                        +anyv3d(i-2,j  ,k,id_biobef_)*anyv3d(i,j,k,5) &
!                        +bio_t(i  ,j  ,k,vb)        *anyv3d(i,j,k,6)  
                        +anyv3d(i  ,j  ,k,id_biobef_)*anyv3d(i,j,k,6)  ! Correction de divergence du/dx !18-01-17

! Cumul du terme de correction de divergence: (A oter A la toute fin de l'advection)
                          bio_t(i  ,j  ,k,vb)= &
                          bio_t(i  ,j  ,k,vb)  &
                        +anyv3d(i  ,j  ,k,id_biobef_)*anyv3d(i,j,k,6)  ! Correction de divergence du/dx !18-01-17


!       if(i==imax/2.and.j==jmax/2.and.k==1) then
!        write(6,*)'loopmaxbio',loopmaxbio
!        write(6,*)'co i  ,j  ',anyv3d(i,j,k,1) 
!        write(6,*)'co i+1,j  ',anyv3d(i,j,k,2) 
!        write(6,*)'co i+2,j  ',anyv3d(i,j,k,3) 
!        write(6,*)'co i-1,j  ',anyv3d(i,j,k,4) 
!        write(6,*)'co i-2,j  ',anyv3d(i,j,k,5) 
!        write(6,*)'constante ',anyv3d(i,j,k,6) 
!       endif

!       if(i==2.and.j==2.and.k==kmax)write(6,*)'----------------'
!       if(i==2.and.j==2.and.k==kmax)write(6,*)anyv3d(i  ,j  ,k,id_biobef_)
!       if(i==2.and.j==2.and.k==kmax)write(6,*)anyv3d(i  ,j  ,k,id_bioaft_),' x'

       enddo ; enddo ; enddo
       if(flag_nemoffline==1)call advection_bio_nemobottom(id_bioaft_)

       do k=1,kmax ; do j=1,jmax ; do i=1,imax
        anyv3d(i,j,k,id_biobef_)=anyv3d(i,j,k,id_bioaft_)
       enddo ; enddo ; enddo

! ICI CONDITION MPI ZB=Z1Z2 sur anyv3d(i,j,k,id_sbef_)
       call obc_int_anyv3d(id_biobef_,'zb')


! Advection partielle direction Oj:
       do k=1,kmax ; do j=1,jmax ; do i=1,imax

                         anyv3d(i  ,j  ,k,id_bioaft_)=                 &
                         anyv3d(i  ,j  ,k,id_biobef_)*anyv3d(i,j,k,7)  &
                        +anyv3d(i  ,j+1,k,id_biobef_)*anyv3d(i,j,k,8)  &
                        +anyv3d(i  ,j+2,k,id_biobef_)*anyv3d(i,j,k,9)  &
                        +anyv3d(i  ,j-1,k,id_biobef_)*anyv3d(i,j,k,10) &
                        +anyv3d(i  ,j-2,k,id_biobef_)*anyv3d(i,j,k,11) &
!                        +bio_t(i  ,j  ,k,vb)        *anyv3d(i,j,k,12)  
                        +anyv3d(i  ,j  ,k,id_biobef_)*anyv3d(i,j,k,12) ! Correction de divergence dv/dy !18-01-17

! Cumul du terme de correction de divergence: (A oter A la toute fin de l'advection)
                          bio_t(i  ,j  ,k,vb)= &
                          bio_t(i  ,j  ,k,vb)  &
                        +anyv3d(i  ,j  ,k,id_biobef_)*anyv3d(i,j,k,12) ! Correction de divergence dv/dy !18-01-17

!       if(i==imax/2.and.j==jmax/2.and.k==1) then
!        write(6,*)'loopmaxbio',loopmaxbio
!        write(6,*)'co i,j    ',anyv3d(i,j,k,7) 
!        write(6,*)'co i,j+1  ',anyv3d(i,j,k,8) 
!        write(6,*)'co i,j+2  ',anyv3d(i,j,k,9) 
!        write(6,*)'co i,j-1  ',anyv3d(i,j,k,10) 
!        write(6,*)'co i,j-2  ',anyv3d(i,j,k,11) 
!        write(6,*)'constante ',anyv3d(i,j,k,12) 
!       endif
!       if(i==2.and.j==2.and.k==kmax)write(6,*)anyv3d(i  ,j  ,k,id_bioaft_),' y'

       enddo ; enddo ; enddo
       if(flag_nemoffline==1)call advection_bio_nemobottom(id_bioaft_)

       do k=1,kmax ; do j=1,jmax ; do i=1,imax
        anyv3d(i,j,k,id_biobef_)=anyv3d(i,j,k,id_bioaft_)
       enddo ; enddo ; enddo

! ICI CONDITION MPI ZB=Z1Z2 sur anyv3d(i,j,k,id_sbef_)
       call obc_int_anyv3d(id_biobef_,'zb')

      enddo                 !iterative loop>

!     enddo         ! vbvbvbvb>


      end subroutine advection_bio_quickest_h

!.................................................................

      subroutine advection_bio_quickest_coef_v
      use module_principal
      use module_parallele
      implicit none
      integer :: id_we_=20 ! identifiant vitesse omega+wsed explicite


!..............................................
! Determiner le nombre de sous-iterations d'advection
! Celui ci sera: int(xy_t(i,j,1))+1
!     substep_advbio est lavVitesse (en nbre de courant) verticale limite pour schema explicite
      xy_t(:,:,1)=small2             ! et non pas zero pour eviter loopmaxbio=0 si courant nul
      do j=1,jmax ; do i=1,imax

!...........
! Dans la colonne d'eau:
       do k=kmin_w(i,j)+1,kmax

          x0=0.5*min(dz_t(i,j,k  ,0)+dz_t(i,j,k  ,1)            &
                    ,dz_t(i,j,k-1,0)+dz_t(i,j,k-1,1))           &
                    /dti_fw    

! omega+wsed explicite bornee
          anyv3d(i,j,k,id_we_)=max(min(                           &
         omega_w(i,j,k,1)+wsed(k,vb)*wsed_explicit(vb)            &
                              , substep_advbio*x0)                &
                              ,-substep_advbio*x0)*wetmask_t(i,j) !13-11-16


             xy_t(i,j,1)                                   &
        =max(xy_t(i,j,1),abs(anyv3d(i,j,k,id_we_))/x0)

       enddo ! boucle k

!...........
! Cas de la surface (dz en k-1...)
       k=kmax+1
          x0=0.5*min(dz_t(i,j,k-1,0)+dz_t(i,j,k-1,1)            & !25-03-18
                    ,dz_t(i,j,k-1,0)+dz_t(i,j,k-1,1))           &
                    /dti_fw

          anyv3d(i,j,k,id_we_)=max(min(                           &
         omega_w(i,j,k,1)+wsed(k,vb)*wsed_explicit(vb)            &
                              , substep_advbio*x0)                &
                              ,-substep_advbio*x0)*wetmask_t(i,j)

             xy_t(i,j,1)                                   &
        =min(max(xy_t(i,j,1),abs(anyv3d(i,j,k,id_we_))/x0),substep_advbio-small2) !25-03-18


      enddo ; enddo ! Boucle i,j

      checkxyt(1)=xy_t(imax/2,jmax/2,1)

! AU FOND: - omega_w=0
!          - la vitesse de sedimention EXPLICITE est nulle
! Il ne reste donc plus qu'a etablir anyv3d(i,j,k,id_we_)=0:
      do j=1,jmax ; do i=1,imax
       do k=1,kmin_w(i,j)-1
          anyv3d(i,j,k,id_we_)=0.
       enddo
      enddo ; enddo ! Boucle i,j


!      stop 'jiji'

!..............................................
      do j=1,jmax ; do i=1,imax ! boucles i j no 2

       dti_fwsubio=dti_fw/ceiling(xy_t(i,j,1))


       do k=kmin_w(i,j)+1,kmax !anciennement 2,kmax   
        
! Nombre de courant vis a vis de omega
       x0=min(1.,   abs(anyv3d(i,j,k,id_we_))*dti_fwsubio      &
                 /(0.5*min(dz_t(i,j,k  ,0)+dz_t(i,j,k  ,1)     &
                          ,dz_t(i,j,k-1,0)+dz_t(i,j,k-1,1))))  &  
                 *upwindriver_t(i,j)                           & !x0 standard si upwindriver=1
             +(1.-upwindriver_t(i,j))                            !x0=1 si upwindriver=0   !18-01-17

! Vitesses positivEes negativEes:
       x1=0.5*(anyv3d(i,j,k,id_we_)+abs(anyv3d(i,j,k,id_we_)))
       x2=0.5*(anyv3d(i,j,k,id_we_)-abs(anyv3d(i,j,k,id_we_)))

! En facteur de B(k):
        anyv1d(k,3)=x1*(0.5-0.5*x0-(1.-x0**2)/6.) &
                   +x2*(0.5+0.5*x0+(1.-x0**2)/3.)

! En facteur de B(k-1):
        anyv1d(k,2)=x1*(0.5+0.5*x0+(1.-x0**2)/3.) &
                   +x2*(0.5-0.5*x0-(1.-x0**2)/6.)

! En facteur de B(k-2):
        anyv1d(k,1)=-x1*(1.-x0**2)/6.

! En facteur de B(k+1):
        anyv1d(k,4)=-x2*(1.-x0**2)/6.

       enddo         ! boucle k no 1

! En k=1 et k=kmax+1 (si omega/=0) schEma upwind
! anciennement do k=1,kmax+1,kmax
       k=kmax+1
        anyv1d(k,3)=0. ! En facteur de B(k)  !23-02-17
        anyv1d(k,2)=0. ! En facteur de B(k-1)!23-02-17
        anyv1d(k,1)=0. ! En facteur de B(k-2)
        anyv1d(k,4)=0. ! En facteur de B(k+1)
      do k=1,kmin_w(i,j)
        anyv1d(k,3)=0. ! En facteur de B(k)
        anyv1d(k,2)=0. ! En facteur de B(k-1)
        anyv1d(k,1)=0. ! En facteur de B(k-2)
        anyv1d(k,4)=0. ! En facteur de B(k+1)
      enddo



       do k=kmin_w(i,j),kmax ! anciennement 1,kmax  ! boucle k no 2

       x3=dti_fwsubio/(0.5*(dz_t(i,j,k,0)   &
                           +dz_t(i,j,k,1)))

! En facteur de B(k+2):
        anyv3d(i,j,k,15)=   x3*(           -anyv1d(k+1,4))

! En facteur de B(k+1):
        anyv3d(i,j,k,14)=   x3*(anyv1d(k,4)-anyv1d(k+1,3))

! En facteur de B(k  ):
        anyv3d(i,j,k,13)=1.+x3*(anyv1d(k,3)-anyv1d(k+1,2))

! En facteur de B(k-1):
        anyv3d(i,j,k,16)=   x3*(anyv1d(k,2)-anyv1d(k+1,1))

! En facteur de B(k-2):
        anyv3d(i,j,k,17)=   x3*(anyv1d(k,1)              )

! Constante:
!      anyv3d(i,j,k,18)=x3*(omega_w(i,j,k+1,1)-omega_w(i,j,k,1))
       anyv3d(i,j,k,18)=x3*(anyv3d(i,j,k+1,id_we_)-anyv3d(i,j,k,id_we_)) !25-03-18

       enddo         ! boucle k no 2

      enddo       ; enddo ! boucles i j no 2

! Optionnel: nombre de courant maximum
      x1=0.
      do j=1,jmax ; do i=1,imax
       x1=max(x1,xy_t(i,j,1))
      enddo       ; enddo
      call mpi_allreduce(x1,x2,1,mpi_double_precision,mpi_max,par%comm2d ,ierr)
      if(par%rank==0)then
       open(unit=3,file='tmp/dti_bio_w',position='append')
          write(3,'(i3,1x,6(e14.7,1x))')vb,elapsedtime_now/86400,wsed(1,vb),x2 !25-01-17
       close(3)
      endif
      

      end subroutine advection_bio_quickest_coef_v

!.................................................................

!.................................................................

      subroutine advection_bio_quickest_v
      use module_principal
      use module_parallele
      implicit none
      integer :: id_biobef_=0  & ! identifiant variable bio "before"
                ,id_bioaft_=19 & ! identifiant variable bio "after"
                ,loopmaxbio_v_ &
                ,loop_


!..............................................
! PARTIE ITERATIVE:
!..............................................
      if(checkxyt(1)/=xy_t(imax/2,jmax/2,1)) & ! securite debug
      stop 'checkxyt(1)/=xy_t(imax/2,jmax/2,1) advection_bio_quickest_v'

      do j=1,jmax ; do i=1,imax ! boucles i j no 3

      loopmaxbio_v_=ceiling(xy_t(i,j,1))

!     if(i==imax/2.and.j==jmax/2) then
!      write(6,*)'nombre de courant ',xy_t(i,j,1)
!      write(6,*)'loopmaxbio_v_',loopmaxbio_v_
!     endif

       do loop_=1,loopmaxbio_v_ !iterative loop>

! Advection partielle direction Ok:
!            do k=3,kmax-2 ! boucle k no 3
             do k=kmin_w(i,j)+2,kmax-2 ! boucle k no 3

                   anyv3d(i  ,j  ,k  ,id_bioaft_)=                 &
                   anyv3d(i  ,j  ,k  ,id_biobef_)*anyv3d(i,j,k,13) &
                  +anyv3d(i  ,j  ,k+1,id_biobef_)*anyv3d(i,j,k,14) &
                  +anyv3d(i  ,j  ,k+2,id_biobef_)*anyv3d(i,j,k,15) &
                  +anyv3d(i  ,j  ,k-1,id_biobef_)*anyv3d(i,j,k,16) &
                  +anyv3d(i  ,j  ,k-2,id_biobef_)*anyv3d(i,j,k,17) &
!                  +bio_t(i  ,j  ,k  ,vb)        *anyv3d(i,j,k,18)
                  +anyv3d(i  ,j  ,k  ,id_biobef_)*anyv3d(i,j,k,18) ! Correction de divergence dw/dz !18-01-17

             enddo       ! boucle k no 3

! Cas particulier:
!                 k=2
                  k=min(kmin_w(i,j)+1,kmax-1)
                   anyv3d(i  ,j  ,k  ,id_bioaft_)=                 &
                   anyv3d(i  ,j  ,k  ,id_biobef_)*anyv3d(i,j,k,13) &
                  +anyv3d(i  ,j  ,k+1,id_biobef_)*anyv3d(i,j,k,14) &
                  +anyv3d(i  ,j  ,k+2,id_biobef_)*anyv3d(i,j,k,15) &
                  +anyv3d(i  ,j  ,k-1,id_biobef_)*anyv3d(i,j,k,16) &
                  +anyv3d(i  ,j  ,k-1,id_biobef_)*anyv3d(i,j,k,17) &
!                  +bio_t(i  ,j  ,k  ,vb)        *anyv3d(i,j,k,18)
                  +anyv3d(i  ,j  ,k  ,id_biobef_)*anyv3d(i,j,k,18) ! Correction de divergence dw/dz !18-01-17
! Cas particulier:
!                 k=1
                  k=min(kmin_w(i,j),kmax-1)
                   anyv3d(i  ,j  ,k  ,id_bioaft_)=                 &
                   anyv3d(i  ,j  ,k  ,id_biobef_)*anyv3d(i,j,k,13) &
                  +anyv3d(i  ,j  ,k+1,id_biobef_)*anyv3d(i,j,k,14) &
                  +anyv3d(i  ,j  ,k+2,id_biobef_)*anyv3d(i,j,k,15) &
                  +anyv3d(i  ,j  ,k  ,id_biobef_)*anyv3d(i,j,k,16) &
                  +anyv3d(i  ,j  ,k  ,id_biobef_)*anyv3d(i,j,k,17) &
!                  +bio_t(i  ,j  ,k  ,vb)        *anyv3d(i,j,k,18)
                  +anyv3d(i  ,j  ,k  ,id_biobef_)*anyv3d(i,j,k,18) ! Correction de divergence dw/dz !18-01-17
! Cas particulier:
                  k=kmax-1
                   anyv3d(i  ,j  ,k  ,id_bioaft_)=                 &
                   anyv3d(i  ,j  ,k  ,id_biobef_)*anyv3d(i,j,k,13) &
                  +anyv3d(i  ,j  ,k+1,id_biobef_)*anyv3d(i,j,k,14) &
                  +anyv3d(i  ,j  ,k+1,id_biobef_)*anyv3d(i,j,k,15) &
                  +anyv3d(i  ,j  ,k-1,id_biobef_)*anyv3d(i,j,k,16) &
                  +anyv3d(i  ,j  ,k-2,id_biobef_)*anyv3d(i,j,k,17) &
!                  +bio_t(i  ,j  ,k  ,vb)        *anyv3d(i,j,k,18)
                  +anyv3d(i  ,j  ,k  ,id_biobef_)*anyv3d(i,j,k,18) ! Correction de divergence dw/dz !18-01-17
! Cas particulier:
                  k=kmax  
                   anyv3d(i  ,j  ,k  ,id_bioaft_)=                 &
                   anyv3d(i  ,j  ,k  ,id_biobef_)*anyv3d(i,j,k,13) &
                  +anyv3d(i  ,j  ,k  ,id_biobef_)*anyv3d(i,j,k,14) &
                  +anyv3d(i  ,j  ,k  ,id_biobef_)*anyv3d(i,j,k,15) &
                  +anyv3d(i  ,j  ,k-1,id_biobef_)*anyv3d(i,j,k,16) &
                  +anyv3d(i  ,j  ,k-2,id_biobef_)*anyv3d(i,j,k,17) &
!                  +bio_t(i  ,j  ,k  ,vb)        *anyv3d(i,j,k,18)
                  +anyv3d(i  ,j  ,k  ,id_biobef_)*anyv3d(i,j,k,18) ! Correction de divergence dw/dz !18-01-17

! Cumul du terme de correction de divergence: (A oter A la toute fin de l'advection)
             do k=kmin_w(i,j),kmax ! anciennement 1,kmax ! boucle k no 4
                    bio_t(i  ,j  ,k,vb)= &
                    bio_t(i  ,j  ,k,vb)  &
                  +anyv3d(i  ,j  ,k  ,id_biobef_)*anyv3d(i,j,k,18) ! Correction de divergence dw/dz !18-01-17
             enddo       ! boucle k no 4

! Contrer les valeurs negatives !10-02-17 (inactif si flag_rmnegval=0)
!            do k=kmin_w(i,j)+1,kmax
!             anyv1d(k,1)=0.5*min(dz_t(i,j,k  ,0)+dz_t(i,j,k  ,1) &
!                                ,dz_t(i,j,k-1,0)+dz_t(i,j,k-1,1))&
!                            *flag_rmnegval
!            enddo
!            anyv1d(kmax+1       ,1)=0.
!            anyv1d(1:kmin_w(i,j),1)=0.
!            do k=kmin_w(i,j),kmax
!             anyv1d(k,2)=min(0.,anyv3d(i,j,k,id_bioaft_))
!            enddo

             do k=kmin_w(i,j),kmax ! anciennement 1,kmax ! boucle k no 5

               anyv3d(i,j,k,id_biobef_)=anyv3d(i,j,k,id_bioaft_)    ! &

! Contrer les valeurs negatives !10-02-17 (inactif si flag_rmnegval=0):
!               +( anyv1d(k+1,1)*(anyv1d(k+1,2)-anyv1d(k,2))    &
!                 +anyv1d(k  ,1)*(anyv1d(k-1,2)-anyv1d(k,2)) )/(dz_t(i,j,k,0)+dz_t(i,j,k,1))

             enddo       ! boucle k no 5

       enddo                 !iterative loop>

! Phase de finalistion expliquee dans:
! https://docs.google.com/document/d/1QLszDYbzYsIavgI1MgexRbpfEtN6rZDSzRiqdkCsIKE/edit
       do k=kmin_w(i,j),kmax ! anciennement 1,kmax ! boucle k no 6

         bio_t(i,j,k,vb)=                                  &
        anyv3d(i,j,k,id_biobef_)                           &
        -bio_t(i,j,k,vb) ! A la toute fin oter le cumul du terme de correction de divergence !18-01-17

       enddo       ! boucle k no 6

      enddo       ; enddo ! boucles i j no 3

! Petit test de conservation mono-proc:
!     sum1=0.
!     sum2=0.
!     sum3=0.
!     do k=1,kmax ; do j=1,jmax ; do i=1,imax
!      sum1=sum1+(dz_t(i,j,k,2)+dz_t(i,j,k,1))*dxdy_t(i,j)*mask_t(i,j,k)
!      sum2=sum2+(dz_t(i,j,k,2)+dz_t(i,j,k,1))*dxdy_t(i,j)*mask_t(i,j,k)*bio_t(i,j,k,1)
!      sum3=sum3+(dz_t(i,j,k,2)+dz_t(i,j,k,1))*dxdy_t(i,j)*mask_t(i,j,k)*bio_t(i,j,k,2)
!     enddo       ; enddo       ; enddo
!     write(6,*)'sum2/sum1=',sum2/sum1
!     write(6,*)'sum3/sum1=',sum3/sum1

!     stop 'coco4'

      end subroutine advection_bio_quickest_v

!.................................................................

!.................................................................

      subroutine advection_checkdim_anyv1d
      use module_principal
      implicit none

! Verifier 2eme dimension de anyv1d
       ub2=ubound(anyv1d) ; lb2=lbound(anyv1d)
       if(lb2(2)>1.or.ub2(2)<4) then !>>>>>>
        deallocate(anyv1d)
          allocate(anyv1d(lb2(1):ub2(1),1:4)) ; anyv1d=0
       endif  

      end subroutine advection_checkdim_anyv1d

!.................................................................

      subroutine advection_quickest_checkdim
      use module_principal
      implicit none
#ifdef synopsis
       subroutinetitle='advection_quickest_checkdim'
       subroutinedescription=' '
       call main_synopsis(subroutinetitle,subroutinedescription)
#endif

! Verifier dimensions 2DH de bio_t
       ub4=ubound(bio_t) ; lb4=lbound(bio_t)
       if(ub4(2)<jmax+2)stop 'Erreur max dimension 2 bio_t'
       if(lb4(2)>-1)    stop 'Erreur min dimension 2 bio_t'
       if(ub4(1)<imax+2)stop 'Erreur max dimension 1 bio_t'
       if(lb4(1)>-1)    stop 'Erreur min dimension 1 bio_t'

! Verifier 4eme dimension de anyv3d
       ub4=ubound(anyv3d) ; lb4=lbound(anyv3d)
       if(lb4(4)>0 .or.ub4(4)<20) then !>>>>>>
        deallocate(anyv3d)
          allocate(anyv3d(-1:imax+2,-1:jmax+2,0:kmax+1,0:20)) ; anyv3d=0
       endif                           !>>>>>>

      end subroutine advection_quickest_checkdim

!.....................................................................

      subroutine advection_bio_min_max !08-02-17
      use module_principal ; use module_parallele ; use module_s
      implicit none

      if(mod(iteration3d,100)/=0)return !13-02-17

! Calcule min et max et indices globaux correspondants des tableaux bio_t et archive ces
! info dans des fichiers tmp/biominVB et tmp/biomaxVB

      istr=2 ; iend=imax-1
      jstr=2 ; jend=jmax-1
      if(obcstatus(ieq1)==1)   istr=1
      if(obcstatus(ieqimax)==1)iend=imax
      if(obcstatus(jeq1)==1)   jstr=1
      if(obcstatus(jeqjmax)==1)jend=jmax

      do vb=1,vbmax

      x1= 1.e10
      x2=-1.e10
      do k=1,kmax ; do j=jstr,jend ; do i=istr,iend

      if(mask_t(i,j,k)==1) then !pmxpmx>

       if(bio_t(i,j,k,vb)>x2) then !maxmax>
        x2=bio_t(i,j,k,vb) ; i2=i ; j2=j ; k2=k
       endif                       !maxmax>
        
       if(bio_t(i,j,k,vb)<x1) then !minmin>
        x1=bio_t(i,j,k,vb) ; i1=i ; j1=j ; k1=k
       endif                       !minmin>

       if(isnan(bio_t(i,j,k,vb))) then !nan>
        write(6,*)'bio_t is NAN par%rank,i,j,k,vb',par%rank,i+par%timax(1),j+par%tjmax(1),k,vb
        stop 'bio_t is NAN'
       endif                           !nan>


      endif                     !pmxpmx>


      enddo ; enddo ; enddo

      call mpi_allreduce(x2,x22,1,mpi_double_precision,mpi_max,par%comm2d ,ierr)
      call mpi_allreduce(x1,x11,1,mpi_double_precision,mpi_min,par%comm2d ,ierr)

      if(x2==x22) then !max>
! Si cette condition est satisfaite on est dans le rank du maximum
       write(texte30,'(a,i0)')'tmp/biomax',vb
       open(unit=3,file=texte30,position='append')
        write(3,'(2(e14.7,1x),4i5)')elapsedtime_now/86400.,x22,par%rank &
                                   ,i2+par%timax(1),j2+par%tjmax(1),k2
       close(3)
      endif            !max>

       if(x1==x11.and.x11<0.) then !min>
! Si cette condition est satisfaite on est dans le rank du minimum
        write(texte30,'(a,i0)')'tmp/biomin',vb
        open(unit=3,file=texte30,position='append')
         write(3,'(2(e14.7,1x),4i5)')elapsedtime_now/86400.,x11,par%rank &
                                    ,i1+par%timax(1),j1+par%tjmax(1),k1
        close(3)
       endif                       !min>

      enddo ! vb loop
      call s_cpu('advection_bio_minmax',0)


      end subroutine advection_bio_min_max

!.........................................................................
      subroutine advection_bio_rmnegval3d !10-02-17
      use module_principal ; use module_parallele ; use module_s
      implicit none


! Détails et evolutions possibles dans: !06-12-16
! https://docs.google.com/document/d/15QsKJhPFiOjxU3os7omfhrhhxNYZBsRTprBmsyuNguc/edit

! Remove Negative Values 

      call obc_bio_mpi('zb') 


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! Calculer un bilan pour verification des proprietes de conservation
!     sum1=0.
!     sum2=0.
!     vb=1
!     do k=1,kmax 
!     do j=1,jmax 
!     do i=1,imax  
!      sum1=sum1+dz_t(i,j,k,0)+dz_t(i,j,k,1)*dxdy_t(i,j)*mask_t(i,j,k)*mask_i_w(i)*mask_j_w(j)
!      sum2=sum2+dz_t(i,j,k,0)+dz_t(i,j,k,1)*dxdy_t(i,j)*mask_t(i,j,k)*mask_i_w(i)*mask_j_w(j)*bio_t(i,j,k,vb)
!     enddo
!     enddo
!     enddo
!     call mpi_allreduce(sum1,sum1glb,1,mpi_double_precision,mpi_sum,par%comm2d,ierr)
!     call mpi_allreduce(sum2,sum2glb,1,mpi_double_precision,mpi_sum,par%comm2d,ierr)
!     if(par%rank==0)write(66,*)iteration3d,sum2glb/sum1glb
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


! Coef diff Oi
      do k=1,kmax 
      do j=1,jmax 
      do i=1,imax+1
        anyv3d(i,j,k,1)=(1./6.)*min(dz_t(i  ,j,k,0)+dz_t(i  ,j,k,1) &
                                   ,dz_t(i-1,j,k,0)+dz_t(i-1,j,k,1))*mask_u(i,j,k)
      enddo
      enddo
      enddo
! Ne pas diffuser A travers les C.L. que nous ne maitrisons pas suffisament:
      if(obcstatus(ieq1)==1)   anyv3d(1     ,:,:,1)=0.
      if(obcstatus(ieqimax)==1)anyv3d(imax+1,:,:,1)=0.
      

! Coef diff Oj
      do k=1,kmax 
      do j=1,jmax+1
      do i=1,imax
        anyv3d(i,j,k,2)=(1./6.)*min(dz_t(i,j  ,k,0)+dz_t(i,j  ,k,1)  &
                                   ,dz_t(i,j-1,k,0)+dz_t(i,j-1,k,1))*mask_v(i,j,k)
      enddo
      enddo
      enddo
! Ne pas diffuser A travers les C.L. que nous ne maitrisons pas suffisament:
      if(obcstatus(jeq1)==1)   anyv3d(:,1     ,:,2)=0.
      if(obcstatus(jeqjmax)==1)anyv3d(:,jmax+1,:,2)=0.

! Coef diff Ok
      do j=1,jmax
      do i=1,imax

       do k=kmin_w(i,j)+1,kmax
        anyv3d(i,j,k,3)=(1./6.)*min(dz_t(i,j,k  ,0)+dz_t(i,j,k  ,1)  &
                                   ,dz_t(i,j,k-1,0)+dz_t(i,j,k-1,1))
       enddo
       do k=1,kmin_w(i,j)
        anyv3d(i,j,k,3)=0.
       enddo
       anyv3d(i,j,kmax+1,3)=0.

      enddo
      enddo

! Diffusion

      do vb=1,vbmax

      do k=1,kmax 
      do j=0,jmax+1
      do i=0,imax+1
       anyv3d(i,j,k,0)=min(bio_t(i,j,k,vb),0.)
      enddo
      enddo
      enddo

      do k=1,kmax 
      do j=1,jmax 
      do i=1,imax

        bio_t(i,j,k,vb)=   &
        bio_t(i,j,k,vb)+(  & !ooooo>

        anyv3d(i+1,j,k,1)*(anyv3d(i+1,j,k,0)-anyv3d(i,j,k,0)) &
       +anyv3d(i  ,j,k,1)*(anyv3d(i-1,j,k,0)-anyv3d(i,j,k,0)) &
       +anyv3d(i,j+1,k,2)*(anyv3d(i,j+1,k,0)-anyv3d(i,j,k,0)) &
       +anyv3d(i,j  ,k,2)*(anyv3d(i,j-1,k,0)-anyv3d(i,j,k,0)) &
       +anyv3d(i,j,k+1,3)*(anyv3d(i,j,k+1,0)-anyv3d(i,j,k,0)) &
       +anyv3d(i,j,k  ,3)*(anyv3d(i,j,k-1,0)-anyv3d(i,j,k,0)) &

                        )  & !ooooo>
                         /(dz_t(i,j,k,0)+dz_t(i,j,k,1))
       

      enddo
      enddo
      enddo

      enddo ! vb
      call s_cpu('advection_bio_rmnegval3d',0)

      end subroutine advection_bio_rmnegval3d
!.........................................................................
      subroutine advection_bio_nemobottom(id_var_) !11-02-17
      use module_principal
      implicit none
      integer id_var_
       do j=1,jmax
       do i=1,imax
        do k=1,kmin_w(i,j)-1
         anyv3d(i,j,k,id_var_)=anyv3d(i,j,kmin_w(i,j),id_var_)
        enddo
       enddo
       enddo
      end subroutine advection_bio_nemobottom
!.........................................................................
      subroutine advection_bio_rmnegval3d_plus !03-11-17
      use module_principal ; use module_parallele ; use module_s
      implicit none


! Détails et evolutions possibles dans: !06-12-16
! https://docs.google.com/document/d/15QsKJhPFiOjxU3os7omfhrhhxNYZBsRTprBmsyuNguc/edit

! Remove Negative Values 

      call obc_bio_mpi('zb') 


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! Calculer un bilan pour verification des proprietes de conservation
!     sum1=0.
!     sum2=0.
!     vb=1
!     do k=1,kmax 
!     do j=1,jmax 
!     do i=1,imax  
!      sum1=sum1+dz_t(i,j,k,0)+dz_t(i,j,k,1)*dxdy_t(i,j)*mask_t(i,j,k)*mask_i_w(i)*mask_j_w(j)
!      sum2=sum2+dz_t(i,j,k,0)+dz_t(i,j,k,1)*dxdy_t(i,j)*mask_t(i,j,k)*mask_i_w(i)*mask_j_w(j)*bio_t(i,j,k,vb)
!     enddo
!     enddo
!     enddo
!     call mpi_allreduce(sum1,sum1glb,1,mpi_double_precision,mpi_sum,par%comm2d,ierr)
!     call mpi_allreduce(sum2,sum2glb,1,mpi_double_precision,mpi_sum,par%comm2d,ierr)
!     if(par%rank==0)write(66,*)iteration3d,sum2glb/sum1glb
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


! Coef diff Oi
      do k=1,kmax 
      do j=1,jmax 
      do i=1,imax+1
        anyv3d(i,j,k,1)=min(dz_t(i  ,j,k,0)+dz_t(i  ,j,k,1) &
                           ,dz_t(i-1,j,k,0)+dz_t(i-1,j,k,1))*mask_u(i,j,k)
      enddo
      enddo
      enddo
! Ne pas diffuser A travers les C.L. que nous ne maitrisons pas suffisament:
      if(obcstatus(ieq1)==1)   anyv3d(1     ,:,:,1)=0.
      if(obcstatus(ieqimax)==1)anyv3d(imax+1,:,:,1)=0.
      

! Coef diff Oj
      do k=1,kmax 
      do j=1,jmax+1
      do i=1,imax
        anyv3d(i,j,k,2)=min(dz_t(i,j  ,k,0)+dz_t(i,j  ,k,1)  &
                           ,dz_t(i,j-1,k,0)+dz_t(i,j-1,k,1))*mask_v(i,j,k)
      enddo
      enddo
      enddo
! Ne pas diffuser A travers les C.L. que nous ne maitrisons pas suffisament:
      if(obcstatus(jeq1)==1)   anyv3d(:,1     ,:,2)=0.
      if(obcstatus(jeqjmax)==1)anyv3d(:,jmax+1,:,2)=0.

! Coef diff Ok
      do j=1,jmax
      do i=1,imax

       do k=kmin_w(i,j)+1,kmax
        anyv3d(i,j,k,3)=min(dz_t(i,j,k  ,0)+dz_t(i,j,k  ,1)  &
                           ,dz_t(i,j,k-1,0)+dz_t(i,j,k-1,1))
       enddo
       do k=1,kmin_w(i,j)
        anyv3d(i,j,k,3)=0.
       enddo
       anyv3d(i,j,kmax+1,3)=0.

      enddo
      enddo

! Diffusion

      do vb=1,vbmax

      do k=1,kmax 
      do j=0,jmax+1
      do i=0,imax+1
!       anyv3d(i,j,k,0)=min(bio_t(i,j,k,vb),0.)
        anyv3d(i,j,k,0)=min(bio_t(i,j,k,vb),small1)
      enddo
      enddo
      enddo

      do k=1,kmax 
      do j=1,jmax 
      do i=1,imax

        bio_t(i,j,k,vb)=   &
        bio_t(i,j,k,vb)+(  & !ooooo>

        anyv3d(i+1,j,k,1)*(anyv3d(i+1,j,k,0)-anyv3d(i,j,k,0))   &
          *max(0.,-sign(1.d0,anyv3d(i+1,j,k,0)*anyv3d(i,j,k,0)))  & !=1 si l'un des deux seulement est <0. O sinon. !03-11-17!18-02-18
       +anyv3d(i  ,j,k,1)*(anyv3d(i-1,j,k,0)-anyv3d(i,j,k,0))   &
          *max(0.,-sign(1.d0,anyv3d(i-1,j,k,0)*anyv3d(i,j,k,0)))  & 
       +anyv3d(i,j+1,k,2)*(anyv3d(i,j+1,k,0)-anyv3d(i,j,k,0))   &
          *max(0.,-sign(1.d0,anyv3d(i,j+1,k,0)*anyv3d(i,j,k,0)))  & 
       +anyv3d(i,j  ,k,2)*(anyv3d(i,j-1,k,0)-anyv3d(i,j,k,0))   &
          *max(0.,-sign(1.d0,anyv3d(i,j-1,k,0)*anyv3d(i,j,k,0)))  & 
       +anyv3d(i,j,k+1,3)*(anyv3d(i,j,k+1,0)-anyv3d(i,j,k,0))   &
          *max(0.,-sign(1.d0,anyv3d(i,j,k+1,0)*anyv3d(i,j,k,0)))  & 
       +anyv3d(i,j,k  ,3)*(anyv3d(i,j,k-1,0)-anyv3d(i,j,k,0))   &
          *max(0.,-sign(1.d0,anyv3d(i,j,k-1,0)*anyv3d(i,j,k,0)))  & 

                        )*0.16  & !ooooo> ! Note: 0.16=troncature inferieure de 1/6
                         /(dz_t(i,j,k,0)+dz_t(i,j,k,1))
       

      enddo
      enddo
      enddo

      enddo ! vb
      call s_cpu('advection_bio_rmnegval3d',0)

      end subroutine advection_bio_rmnegval3d_plus
!.........................................................................
